/**
 * AUTO GENERATED FILE
 */

#ifndef DRIVERSX_CPP_WRAPPER_H
#define DRIVERSX_CPP_WRAPPER_H

#include <vector>
#include <string>
#include <cstring>
#include <ctime>
#include <stdint.h>
#include "utf8cpp/utf8.h"

#if defined(__linux) || defined(__linux__) || defined(linux)

# include <unistd.h>
# include <dlfcn.h>
# include <stdexcept>
# define DTOX_SHARED_CCA
# define LIBRARY_HANDLE void*
# define DTOX_OS_LINUX_FAMILY 1
# if defined (ANDROID)
#  define DTOX_OS_ANDROID 1
# else
#  define DTOX_OS_LINUX 1
# endif
# define PATH_SEPARATOR "/"
# define PATH_SEPARATOR_C '/'
# define PATH_SEPARATOR_W L"/"
# define PATH_SEPARATOR_WC L'/'
# define GET_PROC(h, n) dlsym(h, n)
# define LOAD_LIBRARY(lib) dlopen(lib, RTLD_LAZY)
# define UNLOAD_LIBRARY(h) dlclose(h)
# define JAVAPATH_DELIM L":"

#elif defined(_WIN32) || defined(WIN32) || defined(_WIN64) || defined(WIN64) || \
    defined(__WIN32__) || defined(__TOS_WIN__) || defined(__WINDOWS__) || defined(_WINDOWS)

# include <windows.h>

# ifdef _MSC_VER
#  pragma comment(lib, "advapi32.lib")
# endif

# define DTOX_SHARED_CCA __cdecl
# define LIBRARY_HANDLE HINSTANCE
# define DTOX_OS_WINDOWS_FAMILY 1
# if defined(WINAPI_FAMILY_PARTITION)
#  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
#   define DTOX_OS_WINDOWS 1
#  else
#   define DTOX_OS_WINRT 1
#  endif
# else
#  if defined(_WIN32_WCE)
#   define DTOX_OS_WINCE 1
#  else
#   define DTOX_OS_WINDOWS 1
#  endif
# endif
# define PATH_SEPARATOR "\\"
# define PATH_SEPARATOR_C '\\'
# define PATH_SEPARATOR_W L"\\"
# define PATH_SEPARATOR_WC L'\\'
# define JAVAPATH_DELIM L";"
# if defined(DTOX_OS_WINDOWS)
#  define GET_PROC(h, n)  GetProcAddress(h, n)
#  define LOAD_LIBRARY(lib) LoadLibraryW(lib)
#  define UNLOAD_LIBRARY(h) FreeLibrary(h)
# elif defined(DTOX_OS_WINCE)
#  define GET_PROC(h, n) GetProcAddressA(h, n)
#  define LOAD_LIBRARY(lib) LoadLibraryW(lib)
#  define UNLOAD_LIBRARY(h) FreeLibrary(h)
# elif defined(DTOX_OS_WINRT)
#  define GET_PROC(h, n) GetProcAddress(h, n)
#  define LOAD_LIBRARY(lib) LoadPackagedLibrary(lib, 0)
#  define UNLOAD_LIBRARY(h) FreeLibrary(h)
# endif

#elif defined(__APPLE__)

# include "TargetConditionals.h"
# include <dlfcn.h>
# include <stdexcept>
# define DTOX_SHARED_CCA
# define LIBRARY_HANDLE void*
# define DTOX_OS_APPLE_FAMILY 1
# if TARGET_OS_IPHONE || TARGET_OS_SIMULATOR
#  define DTOX_OS_IPHONE 1
#  if TARGET_OS_SIMULATOR
#   define DTOX_OS_IPHONE_SIMULATOR 1
#  endif
# elif TARGET_OS_MAC
#  define DTOX_OS_MAC 1
# endif
# define PATH_SEPARATOR "/"
# define PATH_SEPARATOR_C '/'
# define PATH_SEPARATOR_W L"/"
# define PATH_SEPARATOR_WC L'/'
# define GET_PROC(h, n) dlsym(h, n)
# define LOAD_LIBRARY(lib) dlopen(lib, RTLD_LAZY)
# define UNLOAD_LIBRARY(h) dlclose(h)
# define JAVAPATH_DELIM L":"

#else

# error "Unsupported platform"

#endif

#if __cplusplus >= 201402L
# define DEPRECATED(msg) [[deprecated(msg)]]
#elif defined(__GNUC__) || defined(__clang__)
# define DEPRECATED(msg) __attribute__((deprecated(msg)))
#elif defined(_MSC_VER)
# define DEPRECATED(msg) __declspec(deprecated(msg))
#else
# define DEPRECATED(msg)
#endif

#ifndef DTOX_ERROR_ON_METHOD_LOAD
# define DTOX_ERROR_ON_METHOD_LOAD 0
#endif

#ifndef FPTR_BEGIN_NAMESPACE
#define FPTR_BEGIN_NAMESPACE namespace Atol { namespace Fptr {
#endif

#ifndef FPTR_END_NAMESPACE
#define FPTR_END_NAMESPACE }}
#endif

#ifndef FPTR_CLASS_NAME
#define FPTR_CLASS_NAME Fptr
#endif

#ifndef uchar
typedef unsigned char uchar;
#endif

#ifndef uint
typedef unsigned int uint;
#endif

FPTR_BEGIN_NAMESPACE

typedef int (DTOX_SHARED_CCA *COMMON_METHOD)(void *);

typedef const char *(DTOX_SHARED_CCA *GET_VERSION_STRING_METHOD)();

typedef int (DTOX_SHARED_CCA *CREATE_METHOD)(void **);
typedef int (DTOX_SHARED_CCA *CREATE_WITH_ID_METHOD)(void **, const wchar_t *);
typedef int (DTOX_SHARED_CCA *DESTROY_METHOD)(void **);

typedef int (DTOX_SHARED_CCA *SET_SETTINGS_METHOD)(void *, const wchar_t *);
typedef int (DTOX_SHARED_CCA *GET_SETTINGS_METHOD)(void *, const wchar_t *, int);
typedef void (DTOX_SHARED_CCA *SET_SINGLE_SETTING_METHOD)(void *, const wchar_t *,
                                                          const wchar_t *);
typedef int (DTOX_SHARED_CCA *GET_SINGLE_SETTING_METHOD)(void *, const wchar_t *,
                                                         wchar_t *, int);

typedef int (DTOX_SHARED_CCA *IS_OPENED_METHOD)(void *);

typedef int (DTOX_SHARED_CCA *ERROR_CODE_METHOD)(void *);
typedef int (DTOX_SHARED_CCA *ERROR_DESCRIPTION_METHOD)(void *, wchar_t *, int);
typedef int (DTOX_SHARED_CCA *ERROR_RECOMMENDATION_METHOD)(void *, wchar_t *, int);
typedef void (DTOX_SHARED_CCA *RESET_ERROR_METHOD)(void *);

typedef void (DTOX_SHARED_CCA *SET_PARAM_BOOL_METHOD)(void *, int, int);
typedef void (DTOX_SHARED_CCA *SET_PARAM_INT_METHOD)(void *, int, unsigned int);
typedef void (DTOX_SHARED_CCA *SET_PARAM_DOUBLE_METHOD)(void *, int, double);
typedef void (DTOX_SHARED_CCA *SET_PARAM_STRING_METHOD)(void *, int, const wchar_t *);
typedef void (DTOX_SHARED_CCA *SET_PARAM_BYTEARRAY_METHOD)(void *, int, const unsigned char *,
                                                           int);
typedef void (DTOX_SHARED_CCA *SET_PARAM_DATETIME_METHOD)(void *, int, int, int, int, int,
                                                          int, int);

typedef int (DTOX_SHARED_CCA *GET_PARAM_BOOL_METHOD)(void *, int);
typedef unsigned int(DTOX_SHARED_CCA *GET_PARAM_INT_METHOD)(void *, int);
typedef double (DTOX_SHARED_CCA *GET_PARAM_DOUBLE_METHOD)(void *, int);
typedef int (DTOX_SHARED_CCA *GET_PARAM_STRING_METHOD)(void *, int, wchar_t *, int);
typedef int (DTOX_SHARED_CCA *GET_PARAM_BYTEARRAY_METHOD)(void *, int, unsigned char *, int);
typedef void (DTOX_SHARED_CCA *GET_PARAM_DATETIME_METHOD)(void *, int, int *, int *, int *,
                                                          int *, int *, int *);
typedef int (DTOX_SHARED_CCA *IS_PARAM_AVAILABLE_METHOD)(void *, int);

typedef int (DTOX_SHARED_CCA *WRITE_LOG_METHOD)(void *, const wchar_t *, int, const wchar_t *);
typedef int (DTOX_SHARED_CCA *CHANGE_LABEL_METHOD)(void *, const wchar_t *);
typedef int (DTOX_SHARED_CCA *SHOW_PROPERTIES_METHOD)(void *, int, void *);


const int LIBFPTR_PARAM_TEXT = 65536; 

const int LIBFPTR_PARAM_TEXT_WRAP = 65537; 

const int LIBFPTR_PARAM_ALIGNMENT = 65538; 

const int LIBFPTR_PARAM_FONT = 65539; 

const int LIBFPTR_PARAM_FONT_DOUBLE_WIDTH = 65540; 

const int LIBFPTR_PARAM_FONT_DOUBLE_HEIGHT = 65541; 

const int LIBFPTR_PARAM_LINESPACING = 65542; 

const int LIBFPTR_PARAM_BRIGHTNESS = 65543; 

const int LIBFPTR_PARAM_MODEL = 65544; 

const int LIBFPTR_PARAM_RECEIPT_TYPE = 65545; 

const int LIBFPTR_PARAM_REPORT_TYPE = 65546; 

const int LIBFPTR_PARAM_MODE = 65547; 

const int LIBFPTR_PARAM_EXTERNAL_DEVICE_TYPE = 65548; 

const int LIBFPTR_PARAM_EXTERNAL_DEVICE_DATA = 65549; 

const int LIBFPTR_PARAM_FREQUENCY = 65550; 

const int LIBFPTR_PARAM_DURATION = 65551; 

const int LIBFPTR_PARAM_CUT_TYPE = 65552; 

const int LIBFPTR_PARAM_DRAWER_ON_TIMEOUT = 65553; 

const int LIBFPTR_PARAM_DRAWER_OFF_TIMEOUT = 65554; 

const int LIBFPTR_PARAM_DRAWER_ON_QUANTITY = 65555; 

const int LIBFPTR_PARAM_TIMEOUT_ENQ = 65556; 

const int LIBFPTR_PARAM_COMMAND_BUFFER = 65557; 

const int LIBFPTR_PARAM_ANSWER_BUFFER = 65558; 

const int LIBFPTR_PARAM_SERIAL_NUMBER = 65559; 

const int LIBFPTR_PARAM_MANUFACTURER_CODE = 65560; 

const int LIBFPTR_PARAM_NO_NEED_ANSWER = 65561; 

const int LIBFPTR_PARAM_INFO_DISCOUNT_SUM = 65562; 

const int LIBFPTR_PARAM_USE_ONLY_TAX_TYPE = 65563; 

const int LIBFPTR_PARAM_PAYMENT_TYPE = 65564; 

const int LIBFPTR_PARAM_PAYMENT_SUM = 65565; 

const int LIBFPTR_PARAM_REMAINDER = 65566; 

const int LIBFPTR_PARAM_CHANGE = 65567; 

const int LIBFPTR_PARAM_DEPARTMENT = 65568; 

const int LIBFPTR_PARAM_TAX_TYPE = 65569; 

const int LIBFPTR_PARAM_TAX_SUM = 65570; 

const int LIBFPTR_PARAM_TAX_MODE = 65571; 

const int LIBFPTR_PARAM_RECEIPT_ELECTRONICALLY = 65572; 

const int LIBFPTR_PARAM_USER_PASSWORD = 65573; 

const int LIBFPTR_PARAM_SCALE = 65574; 

const int LIBFPTR_PARAM_LEFT_MARGIN = 65575; 

const int LIBFPTR_PARAM_BARCODE = 65576; 

const int LIBFPTR_PARAM_BARCODE_TYPE = 65577; 

const int LIBFPTR_PARAM_BARCODE_PRINT_TEXT = 65578; 

const int LIBFPTR_PARAM_BARCODE_VERSION = 65579; 

const int LIBFPTR_PARAM_BARCODE_CORRECTION = 65580; 

const int LIBFPTR_PARAM_BARCODE_COLUMNS = 65581; 

const int LIBFPTR_PARAM_BARCODE_INVERT = 65582; 

const int LIBFPTR_PARAM_HEIGHT = 65583; 

const int LIBFPTR_PARAM_WIDTH = 65584; 

const int LIBFPTR_PARAM_FILENAME = 65585; 

const int LIBFPTR_PARAM_PICTURE_NUMBER = 65586; 

const int LIBFPTR_PARAM_DATA_TYPE = 65587; 

const int LIBFPTR_PARAM_OPERATOR_ID = 65588; 

const int LIBFPTR_PARAM_LOGICAL_NUMBER = 65589; 

const int LIBFPTR_PARAM_DATE_TIME = 65590; 

const int LIBFPTR_PARAM_FISCAL = 65591; 

const int LIBFPTR_PARAM_SHIFT_STATE = 65592; 

const int LIBFPTR_PARAM_CASHDRAWER_OPENED = 65593; 

const int LIBFPTR_PARAM_RECEIPT_PAPER_PRESENT = 65594; 

const int LIBFPTR_PARAM_COVER_OPENED = 65595; 

const int LIBFPTR_PARAM_SUBMODE = 65596; 

const int LIBFPTR_PARAM_RECEIPT_NUMBER = 65597; 

const int LIBFPTR_PARAM_DOCUMENT_NUMBER = 65598; 

const int LIBFPTR_PARAM_SHIFT_NUMBER = 65599; 

const int LIBFPTR_PARAM_RECEIPT_SUM = 65600; 

const int LIBFPTR_PARAM_RECEIPT_LINE_LENGTH = 65601; 

const int LIBFPTR_PARAM_RECEIPT_LINE_LENGTH_PIX = 65602; 

const int LIBFPTR_PARAM_MODEL_NAME = 65603; 

const int LIBFPTR_PARAM_UNIT_VERSION = 65604; 

const int LIBFPTR_PARAM_PRINTER_CONNECTION_LOST = 65605; 

const int LIBFPTR_PARAM_PRINTER_ERROR = 65606; 

const int LIBFPTR_PARAM_CUT_ERROR = 65607; 

const int LIBFPTR_PARAM_PRINTER_OVERHEAT = 65608; 

const int LIBFPTR_PARAM_UNIT_TYPE = 65609; 

const int LIBFPTR_PARAM_LICENSE_NUMBER = 65610; 

const int LIBFPTR_PARAM_LICENSE_ENTERED = 65611; 

const int LIBFPTR_PARAM_LICENSE = 65612; 

const int LIBFPTR_PARAM_SUM = 65613; 

const int LIBFPTR_PARAM_COUNT = 65614; 

const int LIBFPTR_PARAM_COUNTER_TYPE = 65615; 

const int LIBFPTR_PARAM_STEP_COUNTER_TYPE = 65616; 

const int LIBFPTR_PARAM_ERROR_TAG_NUMBER = 65617; 

const int LIBFPTR_PARAM_TABLE = 65618; 

const int LIBFPTR_PARAM_ROW = 65619; 

const int LIBFPTR_PARAM_FIELD = 65620; 

const int LIBFPTR_PARAM_FIELD_VALUE = 65621; 

const int LIBFPTR_PARAM_FN_DATA_TYPE = 65622; 

const int LIBFPTR_PARAM_TAG_NUMBER = 65623; 

const int LIBFPTR_PARAM_TAG_VALUE = 65624; 

const int LIBFPTR_PARAM_DOCUMENTS_COUNT = 65625; 

const int LIBFPTR_PARAM_FISCAL_SIGN = 65626; 

const int LIBFPTR_PARAM_DEVICE_FFD_VERSION = 65627; 

const int LIBFPTR_PARAM_FN_FFD_VERSION = 65628; 

const int LIBFPTR_PARAM_FFD_VERSION = 65629; 

const int LIBFPTR_PARAM_CHECK_SUM = 65630; 

const int LIBFPTR_PARAM_COMMODITY_NAME = 65631; 

const int LIBFPTR_PARAM_PRICE = 65632; 

const int LIBFPTR_PARAM_QUANTITY = 65633; 

const int LIBFPTR_PARAM_POSITION_SUM = 65634; 

const int LIBFPTR_PARAM_FN_TYPE = 65635; 

const int LIBFPTR_PARAM_FN_VERSION = 65636; 

const int LIBFPTR_PARAM_REGISTRATIONS_REMAIN = 65637; 

const int LIBFPTR_PARAM_REGISTRATIONS_COUNT = 65638; 

const int LIBFPTR_PARAM_NO_ERROR_IF_NOT_SUPPORTED = 65639; 

const int LIBFPTR_PARAM_OFD_EXCHANGE_STATUS = 65640; 

const int LIBFPTR_PARAM_FN_ERROR_DATA = 65641; 

const int LIBFPTR_PARAM_FN_ERROR_CODE = 65642; 

const int LIBFPTR_PARAM_ENVD_MODE = 65643; 

const int LIBFPTR_PARAM_DOCUMENT_CLOSED = 65644; 

const int LIBFPTR_PARAM_JSON_DATA = 65645; 

const int LIBFPTR_PARAM_COMMAND_SUBSYSTEM = 65646; 

const int LIBFPTR_PARAM_FN_OPERATION_TYPE = 65647; 

const int LIBFPTR_PARAM_FN_STATE = 65648; 

const int LIBFPTR_PARAM_ENVD_MODE_ENABLED = 65649; 

const int LIBFPTR_PARAM_SETTING_ID = 65650; 

const int LIBFPTR_PARAM_SETTING_VALUE = 65651; 

const int LIBFPTR_PARAM_MAPPING_KEY = 65652; 

const int LIBFPTR_PARAM_MAPPING_VALUE = 65653; 

const int LIBFPTR_PARAM_COMMODITY_PIECE = 65654; 

const int LIBFPTR_PARAM_POWER_SOURCE_TYPE = 65655; 

const int LIBFPTR_PARAM_BATTERY_CHARGE = 65656; 

const int LIBFPTR_PARAM_VOLTAGE = 65657; 

const int LIBFPTR_PARAM_USE_BATTERY = 65658; 

const int LIBFPTR_PARAM_BATTERY_CHARGING = 65659; 

const int LIBFPTR_PARAM_CAN_PRINT_WHILE_ON_BATTERY = 65660; 

const int LIBFPTR_PARAM_MAC_ADDRESS = 65661; 

const int LIBFPTR_PARAM_FN_FISCAL = 65662; 

const int LIBFPTR_PARAM_NETWORK_ERROR = 65663; 

const int LIBFPTR_PARAM_OFD_ERROR = 65664; 

const int LIBFPTR_PARAM_FN_ERROR = 65665; 

const int LIBFPTR_PARAM_COMMAND_CODE = 65666; 

const int LIBFPTR_PARAM_PRINTER_TEMPERATURE = 65667; 

const int LIBFPTR_PARAM_RECORDS_TYPE = 65668; 

const int LIBFPTR_PARAM_OFD_FISCAL_SIGN = 65669; 

const int LIBFPTR_PARAM_HAS_OFD_TICKET = 65670; 

const int LIBFPTR_PARAM_NO_SERIAL_NUMBER = 65671; 

const int LIBFPTR_PARAM_RTC_FAULT = 65672; 

const int LIBFPTR_PARAM_SETTINGS_FAULT = 65673; 

const int LIBFPTR_PARAM_COUNTERS_FAULT = 65674; 

const int LIBFPTR_PARAM_USER_MEMORY_FAULT = 65675; 

const int LIBFPTR_PARAM_SERVICE_COUNTERS_FAULT = 65676; 

const int LIBFPTR_PARAM_ATTRIBUTES_FAULT = 65677; 

const int LIBFPTR_PARAM_FN_FAULT = 65678; 

const int LIBFPTR_PARAM_INVALID_FN = 65679; 

const int LIBFPTR_PARAM_HARD_FAULT = 65680; 

const int LIBFPTR_PARAM_MEMORY_MANAGER_FAULT = 65681; 

const int LIBFPTR_PARAM_SCRIPTS_FAULT = 65682; 

const int LIBFPTR_PARAM_FULL_RESET = 65683; 

const int LIBFPTR_PARAM_WAIT_FOR_REBOOT = 65684; 

const int LIBFPTR_PARAM_SCALE_PERCENT = 65685; 

const int LIBFPTR_PARAM_FN_NEED_REPLACEMENT = 65686; 

const int LIBFPTR_PARAM_FN_RESOURCE_EXHAUSTED = 65687; 

const int LIBFPTR_PARAM_FN_MEMORY_OVERFLOW = 65688; 

const int LIBFPTR_PARAM_FN_OFD_TIMEOUT = 65689; 

const int LIBFPTR_PARAM_FN_CRITICAL_ERROR = 65690; 

const int LIBFPTR_PARAM_OFD_MESSAGE_READ = 65691; 

const int LIBFPTR_PARAM_DEVICE_MIN_FFD_VERSION = 65692; 

const int LIBFPTR_PARAM_DEVICE_MAX_FFD_VERSION = 65693; 

const int LIBFPTR_PARAM_DEVICE_UPTIME = 65694; 

const int LIBFPTR_PARAM_NOMENCLATURE_TYPE = 65695; 

const int LIBFPTR_PARAM_GTIN = 65696; 

const int LIBFPTR_PARAM_FN_DOCUMENT_TYPE = 65697; 

const int LIBFPTR_PARAM_NETWORK_ERROR_TEXT = 65698; 

const int LIBFPTR_PARAM_FN_ERROR_TEXT = 65699; 

const int LIBFPTR_PARAM_OFD_ERROR_TEXT = 65700; 

const int LIBFPTR_PARAM_USER_SCRIPT_ID = 65701; 

const int LIBFPTR_PARAM_USER_SCRIPT_PARAMETER = 65702; 

const int LIBFPTR_PARAM_USER_MEMORY_OPERATION = 65703; 

const int LIBFPTR_PARAM_USER_MEMORY_DATA = 65704; 

const int LIBFPTR_PARAM_USER_MEMORY_STRING = 65705; 

const int LIBFPTR_PARAM_USER_MEMORY_ADDRESS = 65706; 

const int LIBFPTR_PARAM_FN_PRESENT = 65707; 

const int LIBFPTR_PARAM_BLOCKED = 65708; 

const int LIBFPTR_PARAM_DOCUMENT_PRINTED = 65709; 

const int LIBFPTR_PARAM_DISCOUNT_SUM = 65710; 

const int LIBFPTR_PARAM_SURCHARGE_SUM = 65711; 

const int LIBFPTR_PARAM_LK_USER_CODE = 65712; 

const int LIBFPTR_PARAM_LICENSE_COUNT = 65713; 

const int LIBFPTR_PARAM_DEFER = 65714; 

const int LIBFPTR_PARAM_CAP_54FZ = 65715; 

const int LIBFPTR_PARAM_CAP_MANUAL_CLICHE_CONTROL = 65716; 

const int LIBFPTR_PARAM_CAP_PAYMENTS_COUNT = 65717; 

const int LIBFPTR_PARAM_FIRMWARE_CHUNK_SIZE = 65718; 

const int LIBFPTR_PARAM_FIRMWARE_CHUNK_DATA = 65719; 

const int LIBFPTR_PARAM_FN_FLAGS = 65720; 

const int LIBFPTR_PARAM_PRINT_FOOTER = 65721; 

const int LIBFPTR_PARAM_PUBLIC_KEY = 65722; 

const int LIBFPTR_PARAM_MAGIC_NUMBER = 65723; 

const int LIBFPTR_PARAM_SIGN = 65724; 

const int LIBFPTR_PARAM_SOFT_NAME = 65725; 

const int LIBFPTR_PARAM_SESSION_CODE = 65726; 

const int LIBFPTR_PARAM_ETHERNET_CONFIG_TIMEOUT = 65727; 

const int LIBFPTR_PARAM_ETHERNET_DHCP = 65728; 

const int LIBFPTR_PARAM_ETHERNET_IP = 65729; 

const int LIBFPTR_PARAM_ETHERNET_MASK = 65730; 

const int LIBFPTR_PARAM_ETHERNET_GATEWAY = 65731; 

const int LIBFPTR_PARAM_ETHERNET_PORT = 65732; 

const int LIBFPTR_PARAM_ETHERNET_DNS_IP = 65733; 

const int LIBFPTR_PARAM_ETHERNET_DNS_STATIC = 65734; 

const int LIBFPTR_PARAM_STORE_IN_JOURNAL = 65735; 

const int LIBFPTR_PARAM_NEW_PLATFORM = 65736; 

const int LIBFPTR_PARAM_UNIT_RELEASE_VERSION = 65737; 

const int LIBFPTR_PARAM_USE_VAT18 = 65738; 

const int LIBFPTR_PARAM_TAG_NAME = 65739; 

const int LIBFPTR_PARAM_TAG_TYPE = 65740; 

const int LIBFPTR_PARAM_TAG_IS_COMPLEX = 65741; 

const int LIBFPTR_PARAM_TAG_IS_REPEATABLE = 65742; 

const int LIBFPTR_PARAM_SHIFT_AUTO_OPENED = 65743; 

const int LIBFPTR_PARAM_CONTAINER_FIRMWARE_VERSION = 65744; 

const int LIBFPTR_PARAM_CONTAINER_CONFIGURATION_VERSION = 65745; 

const int LIBFPTR_PARAM_CONTAINER_BOOTLOADER_VERSION = 65746; 

const int LIBFPTR_PARAM_CONTAINER_SCRIPTS_VERSION = 65747; 

const int LIBFPTR_PARAM_PAPER_NEAR_END = 65748; 

const int LIBFPTR_PARAM_REPORT_ELECTRONICALLY = 65749; 

const int LIBFPTR_PARAM_ACTIVATION_METHOD = 65750; 

const int LIBFPTR_PARAM_KEYS = 65751; 

const int LIBFPTR_PARAM_UIN = 65752; 

const int LIBFPTR_PARAM_VERSION = 65753; 

const int LIBFPTR_PARAM_PUBLIC_KEY_SIGN = 65754; 

const int LIBFPTR_PARAM_CAP_DISABLE_PRINT_REPORTS = 65755; 

const int LIBFPTR_PARAM_REGISTRATION_NUMBER = 65756; 

const int LIBFPTR_PARAM_PIXEL_BUFFER = 65757; 

const int LIBFPTR_PARAM_REPEAT_NUMBER = 65758; 

const int LIBFPTR_PARAM_FIELD_TYPE = 65759; 

const int LIBFPTR_PARAM_MARKING_CODE = 65760; 

const int LIBFPTR_PARAM_CONTAINER_DIRECT_BOOT_VERSION = 65761; 

const int LIBFPTR_PARAM_SCRIPT_NAME = 65762; 

const int LIBFPTR_PARAM_SCRIPT_HASH = 65763; 

const int LIBFPTR_PARAM_RECORDS_ID = 65764; 

const int LIBFPTR_PARAM_USER_SCRIPT_RESULT_1 = 65765; 

const int LIBFPTR_PARAM_USER_SCRIPT_RESULT_2 = 65766; 

const int LIBFPTR_PARAM_USER_SCRIPT_RESULT_3 = 65767; 

const int LIBFPTR_PARAM_USER_SCRIPT_RESULT_4 = 65768; 

const int LIBFPTR_PARAM_USER_SCRIPT_RESULT_5 = 65769; 

const int LIBFPTR_PARAM_IS_USER_SCRIPT = 65770; 

const int LIBFPTR_PARAM_DOCUMENT_NUMBER_END = 65771; 

const int LIBFPTR_PARAM_SHIFT_NUMBER_END = 65772; 

const int LIBFPTR_PARAM_SCRIPT_CODE = 65773; 

const int LIBFPTR_PARAM_SCRIPT_RESULT = 65774; 

const int LIBFPTR_PARAM_SCRIPT_TYPE = 65775; 

const int LIBFPTR_PARAM_WIFI_CONFIG_TIMEOUT = 65776; 

const int LIBFPTR_PARAM_WIFI_DHCP = 65777; 

const int LIBFPTR_PARAM_WIFI_IP = 65778; 

const int LIBFPTR_PARAM_WIFI_MASK = 65779; 

const int LIBFPTR_PARAM_WIFI_GATEWAY = 65780; 

const int LIBFPTR_PARAM_WIFI_PORT = 65781; 

const int LIBFPTR_PARAM_UC_VERSION = 65782; 

const int LIBFPTR_PARAM_UC_AVAILABLE_MEMORY = 65783; 

const int LIBFPTR_PARAM_UC_USED_MEMORY_BY_SUMS = 65784; 

const int LIBFPTR_PARAM_UC_USED_MEMORY_BY_QUANTITIES = 65785; 

const int LIBFPTR_PARAM_UC_LAYER_1 = 65786; 

const int LIBFPTR_PARAM_UC_FLAGS_1 = 65787; 

const int LIBFPTR_PARAM_UC_MASK_1 = 65788; 

const int LIBFPTR_PARAM_UC_LAYER_VALUE_1 = 65789; 

const int LIBFPTR_PARAM_UC_LAYER_2 = 65790; 

const int LIBFPTR_PARAM_UC_FLAGS_2 = 65791; 

const int LIBFPTR_PARAM_UC_MASK_2 = 65792; 

const int LIBFPTR_PARAM_UC_LAYER_VALUE_2 = 65793; 

const int LIBFPTR_PARAM_UC_LAYER_3 = 65794; 

const int LIBFPTR_PARAM_UC_FLAGS_3 = 65795; 

const int LIBFPTR_PARAM_UC_MASK_3 = 65796; 

const int LIBFPTR_PARAM_UC_LAYER_VALUE_3 = 65797; 

const int LIBFPTR_PARAM_UC_LAYER_4 = 65798; 

const int LIBFPTR_PARAM_UC_FLAGS_4 = 65799; 

const int LIBFPTR_PARAM_UC_MASK_4 = 65800; 

const int LIBFPTR_PARAM_UC_LAYER_VALUE_4 = 65801; 

const int LIBFPTR_PARAM_RECEIPTS_COUNT = 65802; 

const int LIBFPTR_PARAM_PAYMENTS_SUM_CASH = 65803; 

const int LIBFPTR_PARAM_PAYMENTS_SUM_ELECTRONICALLY = 65804; 

const int LIBFPTR_PARAM_PAYMENTS_SUM_PREPAID = 65805; 

const int LIBFPTR_PARAM_PAYMENTS_SUM_CREDIT = 65806; 

const int LIBFPTR_PARAM_PAYMENTS_SUM_OTHER = 65807; 

const int LIBFPTR_PARAM_TAXES_SUM_VAT20 = 65808; 

const int LIBFPTR_PARAM_TAXES_SUM_VAT120 = 65809; 

const int LIBFPTR_PARAM_TAXES_SUM_VAT10 = 65810; 

const int LIBFPTR_PARAM_TAXES_SUM_VAT110 = 65811; 

const int LIBFPTR_PARAM_TAXES_SUM_VAT0 = 65812; 

const int LIBFPTR_PARAM_TAXES_SUM_NO = 65813; 

const int LIBFPTR_PARAM_CORRECTIONS_COUNT = 65814; 

const int LIBFPTR_PARAM_CORRECTIONS_SUM = 65815; 

const int LIBFPTR_PARAM_FN_COUNTERS_TYPE = 65816; 

const int LIBFPTR_PARAM_FN_DAYS_REMAIN = 65817; 

const int LIBFPTR_PARAM_FREE_MEMORY = 65818; 

const int LIBFPTR_PARAM_FN_MAX_FFD_VERSION = 65819; 

const int LIBFPTR_PARAM_RECEIPTS_SUM = 65820; 

const int LIBFPTR_PARAM_LICENSE_NAME = 65821; 

const int LIBFPTR_PARAM_UNIVERSAL_COUNTERS_FAULT = 65822; 

const int LIBFPTR_PARAM_USE_LICENSES = 65823; 

const int LIBFPTR_PARAM_LICENSE_VALID_FROM = 65824; 

const int LIBFPTR_PARAM_LICENSE_VALID_UNTIL = 65825; 

const int LIBFPTR_PARAM_MARKING_CODE_TYPE = 65826; 

const int LIBFPTR_PARAM_SETTING_NAME = 65827; 

const int LIBFPTR_PARAM_SETTING_TYPE = 65828; 

const int LIBFPTR_PARAM_FONT_WIDTH = 65829; 

const int LIBFPTR_PARAM_REMOTE_CALL = 65830; 

const int LIBFPTR_PARAM_SCRIPT_PARAMS = 65831; 

const int LIBFPTR_PARAM_IGNORE_EMPTY = 65832; 

const int LIBFPTR_PARAM_METHOD_DATA = 65833; 

const int LIBFPTR_PARAM_METHOD_RESULT = 65834; 

const int LIBFPTR_PARAM_RPC_SERVER_OS = 65835; 

const int LIBFPTR_PARAM_RPC_SERVER_VERSION = 65836; 

const int LIBFPTR_PARAM_RPC_DRIVER_VERSION = 65837; 

const int LIBFPTR_PARAM_LOCKED = 65838; 

const int LIBFPTR_PARAM_BOUND = 65839; 

const int LIBFPTR_PARAM_COMMODITIES_TABLE_FAULT = 65840; 

const int LIBFPTR_PARAM_HAS_ADDITIONAL_DATA = 65841; 

const int LIBFPTR_PARAM_FISCAL_SIGN_ARCHIVE = 65842; 

const int LIBFPTR_PARAM_COMMAND_GROUP = 65843; 

const int LIBFPTR_PARAM_ERROR_CODE = 65844; 

const int LIBFPTR_PARAM_MARKING_WAIT_FOR_VALIDATION_RESULT = 65845; 

const int LIBFPTR_PARAM_MARKING_CODE_STATUS = 65846; 

const int LIBFPTR_PARAM_MARKING_CODE_VALIDATION_RESULT = 65847; 

const int LIBFPTR_PARAM_MARKING_CODE_OFFLINE_VALIDATION_ERROR = 65848; 

const int LIBFPTR_PARAM_MARKING_CODE_ONLINE_VALIDATION_ERROR = 65849; 

const int LIBFPTR_PARAM_MARKING_CODE_VALIDATION_READY = 65850; 

const int LIBFPTR_PARAM_MEASUREMENT_UNIT = 65851; 

const int LIBFPTR_PARAM_MARKING_PROCESSING_MODE = 65852; 

const int LIBFPTR_PARAM_MARKING_FRACTIONAL_QUANTITY = 65853; 

const int LIBFPTR_PARAM_PRODUCT_CODE = 65854; 

const int LIBFPTR_PARAM_TRADE_MARKED_PRODUCTS = 65855; 

const int LIBFPTR_PARAM_INSURANCE_ACTIVITY = 65856; 

const int LIBFPTR_PARAM_PAWN_SHOP_ACTIVITY = 65857; 

const int LIBFPTR_PARAM_TLV_LIST = 65858; 

const int LIBFPTR_PARAM_CHECK_MARKING_SERVER_READY = 65859; 

const int LIBFPTR_PARAM_MARKING_SERVER_RESPONSE_TIME = 65860; 

const int LIBFPTR_PARAM_MARKING_SERVER_ERROR_CODE = 65861; 

const int LIBFPTR_PARAM_MARKING_SERVER_ERROR_DESCRIPTION = 65862; 

const int LIBFPTR_PARAM_ISM_ERROR = 65863; 

const int LIBFPTR_PARAM_ISM_ERROR_TEXT = 65864; 

const int LIBFPTR_PARAM_MARKING_MODE_CHECKING_STATUS = 65865; 

const int LIBFPTR_PARAM_MARK_CHECKING_COUNT = 65866; 

const int LIBFPTR_PARAM_MARK_SOLD_COUNT = 65867; 

const int LIBFPTR_PARAM_NOTICE_IS_BEGIN = 65868; 

const int LIBFPTR_PARAM_NOTICE_FREE_MEMORY = 65869; 

const int LIBFPTR_PARAM_NOTICE_COUNT = 65870; 

const int LIBFPTR_PARAM_MARKING_NOT_SEND_TO_SERVER = 65871; 

const int LIBFPTR_PARAM_DOCUMENT_TYPE = 65872; 

const int LIBFPTR_PARAM_PRINT_REPORT = 65873; 

const int LIBFPTR_PARAM_FN_EXECUTION = 65874; 

const int LIBFPTR_PARAM_MCU_SN = 65875; 

const int LIBFPTR_PARAM_MCU_PART_ID = 65876; 

const int LIBFPTR_PARAM_MCU_PART_NAME = 65877; 

const int LIBFPTR_PARAM_IS_REQUEST_SENT = 65878; 

const int LIBFPTR_PARAM_FN_CHECK_MARK_TIME = 65879; 

const int LIBFPTR_PARAM_SENDING_MARK_TIME = 65880; 

const int LIBFPTR_PARAM_MARKING_SERVER_EXCHANGE_TIME = 65881; 

const int LIBFPTR_PARAM_FULL_SENDING_MARK_TIME = 65882; 

const int LIBFPTR_PARAM_MARK_CHECKING_STATUS_IN_CASH = 65883; 

const int LIBFPTR_PARAM_MARK_CHECKING_TYPE_IN_CASH = 65884; 

const int LIBFPTR_PARAM_MARK_CHECKING_STAGE_IN_CASH = 65885; 

const int LIBFPTR_PARAM_MARKING_CODE_ONLINE_VALIDATION_RESULT = 65886; 

const int LIBFPTR_PARAM_MARKING_CODE_ONLINE_VALIDATION_ERROR_DESCRIPTION = 65887; 

const int LIBFPTR_PARAM_FN_CONTAINS_KEYS_UPDATER_SERVER_URI = 65888; 

const int LIBFPTR_PARAM_CLEAR_MARKING_TABLE = 65889; 

const int LIBFPTR_PARAM_MODULE_ADDRESS = 65890; 

const int LIBFPTR_PARAM_SEGMENT_ADDRESS = 65891; 

const int LIBFPTR_PARAM_LAST_SUCCESSFUL_OKP = 65892; 

const int LIBFPTR_PARAM_FN_SERIAL_NUMBER = 65893; 

const int LIBFPTR_PARAM_ECR_REGISTRATION_NUMBER = 65894; 

const int LIBFPTR_PARAM_OFD_VATIN = 65895; 

const int LIBFPTR_PARAM_FNS_URL = 65896; 

const int LIBFPTR_PARAM_MACHINE_NUMBER = 65897; 

const int LIBFPTR_PARAM_MARKING_PRODUCT_ID = 65898; 

const int LIBFPTR_PARAM_TIMEOUT = 65899; 

const int LIBFPTR_PARAM_PRINT_UPDATE_FNM_KEYS_REPORT = 65900; 

const int LIBFPTR_PARAM_FN_KEYS_UPDATER_SERVER_URI = 65901; 

const int LIBFPTR_PARAM_DOCUMENT_ELECTRONICALLY = 65902; 

const int LIBFPTR_PARAM_FORMAT_TEXT = 65903; 

const int LIBFPTR_PARAM_RECEIPT_SIZE = 65904; 

const int LIBFPTR_PARAM_MARK_SIZE = 65905; 

const int LIBFPTR_PARAM_MCU_TEMPERATURE = 65906; 

const int LIBFPTR_PARAM_DATA_FOR_SEND_IS_EMPTY = 65907; 

const int LIBFPTR_PARAM_AVAILABLE_CLOSING = 65908; 

const int LIBFPTR_PARAM_AVAILABLE_CANCELLATION = 65909; 

const int LIBFPTR_PARAM_AVAILABLE_POSITION_ADDING = 65910; 

const int LIBFPTR_PARAM_AVAILABLE_PAYMENT = 65911; 

const int LIBFPTR_PARAM_AVAILABLE_TOTAL = 65912; 

const int LIBFPTR_PARAM_AVAILABLE_ATTRIBUTES_ADDING = 65913; 

const int LIBFPTR_PARAM_OPERATOR_REGISTERED = 65914; 

const int LIBFPTR_PARAM_DEVICE_PLATFORM_VERSION = 65915; 

const int LIBFPTR_PARAM_GUID = 65916; 

const int LIBFPTR_PARAM_PATTERN_REGISTERS = 65917; 

const int LIBFPTR_PARAM_PATTERN_TAGS = 65918; 

const int LIBFPTR_PARAM_PATTERN_SETTINGS = 65919; 

const int LIBFPTR_PARAM_VENDING = 65920; 

const int LIBFPTR_PARAM_CATERING = 65921; 

const int LIBFPTR_PARAM_WHOLESALE = 65922; 

const int LIBFPTR_PARAM_REGISTRATION_POSITION_FORM = 65923; 

const int LIBFPTR_PARAM_MERGE_POSITIONS = 65924; 

const int LIBFPTR_PARAM_DATAFLASH_JEDEC_ID = 65925; 

const int LIBFPTR_PARAM_DATAFLASH_NAME = 65926; 

const int LIBFPTR_PARAM_DATAFLASH_SIZE = 65927; 

const int LIBFPTR_PARAM_FRAM_EEPROM_NAME = 65928; 

const int LIBFPTR_PARAM_FRAM_EEPROM_SIZE = 65929; 

const int LIBFPTR_PARAM_MARKING_NOT_FORM_REQUEST = 65930; 

const int LIBFPTR_PARAM_PRINT_ENTITY_TYPE = 65931; 

const int LIBFPTR_PARAM_RECEIPT_TAPE_PATH_LENGTH = 65932; 

const int LIBFPTR_PARAM_LICENSE_INDEX = 65933; 

const int LIBFPTR_PARAM_IS_LICENSE_VALID = 65934; 

const int LIBFPTR_PARAM_RECEIPT_PERCENTAGE_SIZE = 65935; 

const int LIBFPTR_PARAM_LAST_SUCCESS_FNM_UPDATE_KEYS_DATE_TIME = 65936; 

const int LIBFPTR_PARAM_LAST_ATTEMPTION_FNM_UPDATE_KEYS_DATE_TIME = 65937; 

const int LIBFPTR_PARAM_COUNT_ATTEMPTION_FNM_UPDATE_KEYS = 65938; 

const int LIBFPTR_OK = 0; 

const int LIBFPTR_ERROR_CONNECTION_DISABLED = 1; 

const int LIBFPTR_ERROR_NO_CONNECTION = 2; 

const int LIBFPTR_ERROR_PORT_BUSY = 3; 

const int LIBFPTR_ERROR_PORT_NOT_AVAILABLE = 4; 

const int LIBFPTR_ERROR_INCORRECT_DATA = 5; 

const int LIBFPTR_ERROR_INTERNAL = 6; 

const int LIBFPTR_ERROR_UNSUPPORTED_CAST = 7; 

const int LIBFPTR_ERROR_NO_REQUIRED_PARAM = 8; 

const int LIBFPTR_ERROR_INVALID_SETTINGS = 9; 

const int LIBFPTR_ERROR_NOT_CONFIGURED = 10; 

const int LIBFPTR_ERROR_NOT_SUPPORTED = 11; 

const int LIBFPTR_ERROR_INVALID_MODE = 12; 

const int LIBFPTR_ERROR_INVALID_PARAM = 13; 

const int LIBFPTR_ERROR_NOT_LOADED = 14; 

const int LIBFPTR_ERROR_UNKNOWN = 15; 

const int LIBFPTR_ERROR_INVALID_SUM = 16; 

const int LIBFPTR_ERROR_INVALID_QUANTITY = 17; 

const int LIBFPTR_ERROR_CASH_COUNTER_OVERFLOW = 18; 

const int LIBFPTR_ERROR_LAST_OPERATION_STORNO_DENIED = 19; 

const int LIBFPTR_ERROR_STORNO_BY_CODE_DENIED = 20; 

const int LIBFPTR_ERROR_LAST_OPERATION_NOT_REPEATABLE = 21; 

const int LIBFPTR_ERROR_DISCOUNT_NOT_REPEATABLE = 22; 

const int LIBFPTR_ERROR_DISCOUNT_DENIED = 23; 

const int LIBFPTR_ERROR_INVALID_COMMODITY_CODE = 24; 

const int LIBFPTR_ERROR_INVALID_COMMODITY_BARCODE = 25; 

const int LIBFPTR_ERROR_INVALID_COMMAND_FORMAT = 26; 

const int LIBFPTR_ERROR_INVALID_COMMAND_LENGTH = 27; 

const int LIBFPTR_ERROR_BLOCKED_IN_DATE_INPUT_MODE = 28; 

const int LIBFPTR_ERROR_NEED_DATE_ACCEPT = 29; 

const int LIBFPTR_ERROR_NO_MORE_DATA = 30; 

const int LIBFPTR_ERROR_NO_ACCEPT_OR_CANCEL = 31; 

const int LIBFPTR_ERROR_BLOCKED_BY_REPORT_INTERRUPTION = 32; 

const int LIBFPTR_ERROR_DISABLE_CASH_CONTROL_DENIED = 33; 

const int LIBFPTR_ERROR_MODE_BLOCKED = 34; 

const int LIBFPTR_ERROR_CHECK_DATE_TIME = 35; 

const int LIBFPTR_ERROR_DATE_TIME_LESS_THAN_FS = 36; 

const int LIBFPTR_ERROR_CLOSE_ARCHIVE_DENIED = 37; 

const int LIBFPTR_ERROR_COMMODITY_NOT_FOUND = 38; 

const int LIBFPTR_ERROR_WEIGHT_BARCODE_WITH_INVALID_QUANTITY = 39; 

const int LIBFPTR_ERROR_RECEIPT_BUFFER_OVERFLOW = 40; 

const int LIBFPTR_ERROR_QUANTITY_TOO_FEW = 41; 

const int LIBFPTR_ERROR_STORNO_TOO_MUCH = 42; 

const int LIBFPTR_ERROR_BLOCKED_COMMODITY_NOT_FOUND = 43; 

const int LIBFPTR_ERROR_NO_PAPER = 44; 

const int LIBFPTR_ERROR_COVER_OPENED = 45; 

const int LIBFPTR_ERROR_PRINTER_FAULT = 46; 

const int LIBFPTR_ERROR_MECHANICAL_FAULT = 47; 

const int LIBFPTR_ERROR_INVALID_RECEIPT_TYPE = 48; 

const int LIBFPTR_ERROR_INVALID_UNIT_TYPE = 49; 

const int LIBFPTR_ERROR_NO_MEMORY = 50; 

const int LIBFPTR_ERROR_PICTURE_NOT_FOUND = 51; 

const int LIBFPTR_ERROR_NONCACH_PAYMENTS_TOO_MUCH = 52; 

const int LIBFPTR_ERROR_RETURN_DENIED = 53; 

const int LIBFPTR_ERROR_PAYMENTS_OVERFLOW = 54; 

const int LIBFPTR_ERROR_BUSY = 55; 

const int LIBFPTR_ERROR_GSM = 56; 

const int LIBFPTR_ERROR_INVALID_DISCOUNT = 57; 

const int LIBFPTR_ERROR_OPERATION_AFTER_DISCOUNT_DENIED = 58; 

const int LIBFPTR_ERROR_INVALID_DEPARTMENT = 59; 

const int LIBFPTR_ERROR_INVALID_PAYMENT_TYPE = 60; 

const int LIBFPTR_ERROR_MULTIPLICATION_OVERFLOW = 61; 

const int LIBFPTR_ERROR_DENIED_BY_SETTINGS = 62; 

const int LIBFPTR_ERROR_TOTAL_OVERFLOW = 63; 

const int LIBFPTR_ERROR_DENIED_IN_ANNULATION_RECEIPT = 64; 

const int LIBFPTR_ERROR_JOURNAL_OVERFLOW = 65; 

const int LIBFPTR_ERROR_NOT_FULLY_PAID = 66; 

const int LIBFPTR_ERROR_DENIED_IN_RETURN_RECEIPT = 67; 

const int LIBFPTR_ERROR_SHIFT_EXPIRED = 68; 

const int LIBFPTR_ERROR_DENIED_IN_SELL_RECEIPT = 69; 

const int LIBFPTR_ERROR_FISCAL_MEMORY_OVERFLOW = 70; 

const int LIBFPTR_ERROR_INVALID_PASSWORD = 71; 

const int LIBFPTR_ERROR_JOURNAL_BUSY = 72; 

const int LIBFPTR_ERROR_DENIED_IN_CLOSED_SHIFT = 73; 

const int LIBFPTR_ERROR_INVALID_TABLE_NUMBER = 74; 

const int LIBFPTR_ERROR_INVALID_ROW_NUMBER = 75; 

const int LIBFPTR_ERROR_INVALID_FIELD_NUMBER = 76; 

const int LIBFPTR_ERROR_INVALID_DATE_TIME = 77; 

const int LIBFPTR_ERROR_INVALID_STORNO_SUM = 78; 

const int LIBFPTR_ERROR_CHANGE_CALCULATION = 79; 

const int LIBFPTR_ERROR_NO_CASH = 80; 

const int LIBFPTR_ERROR_DENIED_IN_CLOSED_RECEIPT = 81; 

const int LIBFPTR_ERROR_DENIED_IN_OPENED_RECEIPT = 82; 

const int LIBFPTR_ERROR_DENIED_IN_OPENED_SHIFT = 83; 

const int LIBFPTR_ERROR_SERIAL_NUMBER_ALREADY_ENTERED = 84; 

const int LIBFPTR_ERROR_TOO_MUCH_REREGISTRATIONS = 85; 

const int LIBFPTR_ERROR_INVALID_SHIFT_NUMBER = 86; 

const int LIBFPTR_ERROR_INVALID_SERIAL_NUMBER = 87; 

const int LIBFPTR_ERROR_INVALID_RNM_VATIN = 88; 

const int LIBFPTR_ERROR_FISCAL_PRINTER_NOT_ACTIVATED = 89; 

const int LIBFPTR_ERROR_SERIAL_NUMBER_NOT_ENTERED = 90; 

const int LIBFPTR_ERROR_NO_MORE_REPORTS = 91; 

const int LIBFPTR_ERROR_MODE_NOT_ACTIVATED = 92; 

const int LIBFPTR_ERROR_RECORD_NOT_FOUND_IN_JOURNAL = 93; 

const int LIBFPTR_ERROR_INVALID_LICENSE = 94; 

const int LIBFPTR_ERROR_NEED_FULL_RESET = 95; 

const int LIBFPTR_ERROR_DENIED_BY_LICENSE = 96; 

const int LIBFPTR_ERROR_DISCOUNT_CANCELLATION_DENIED = 97; 

const int LIBFPTR_ERROR_CLOSE_RECEIPT_DENIED = 98; 

const int LIBFPTR_ERROR_INVALID_ROUTE_NUMBER = 99; 

const int LIBFPTR_ERROR_INVALID_START_ZONE_NUMBER = 100; 

const int LIBFPTR_ERROR_INVALID_END_ZONE_NUMBER = 101; 

const int LIBFPTR_ERROR_INVALID_RATE_TYPE = 102; 

const int LIBFPTR_ERROR_INVALID_RATE = 103; 

const int LIBFPTR_ERROR_FISCAL_MODULE_EXCHANGE = 104; 

const int LIBFPTR_ERROR_NEED_TECHNICAL_SUPPORT = 105; 

const int LIBFPTR_ERROR_SHIFT_NUMBERS_DID_NOT_MATCH = 106; 

const int LIBFPTR_ERROR_DEVICE_NOT_FOUND = 107; 

const int LIBFPTR_ERROR_EXTERNAL_DEVICE_CONNECTION = 108; 

const int LIBFPTR_ERROR_DISPENSER_INVALID_STATE = 109; 

const int LIBFPTR_ERROR_INVALID_POSITIONS_COUNT = 110; 

const int LIBFPTR_ERROR_DISPENSER_INVALID_NUMBER = 111; 

const int LIBFPTR_ERROR_INVALID_DIVIDER = 112; 

const int LIBFPTR_ERROR_FN_ACTIVATION_DENIED = 113; 

const int LIBFPTR_ERROR_PRINTER_OVERHEAT = 114; 

const int LIBFPTR_ERROR_FN_EXCHANGE = 115; 

const int LIBFPTR_ERROR_FN_INVALID_FORMAT = 116; 

const int LIBFPTR_ERROR_FN_INVALID_STATE = 117; 

const int LIBFPTR_ERROR_FN_FAULT = 118; 

const int LIBFPTR_ERROR_FN_CRYPTO_FAULT = 119; 

const int LIBFPTR_ERROR_FN_EXPIRED = 120; 

const int LIBFPTR_ERROR_FN_OVERFLOW = 121; 

const int LIBFPTR_ERROR_FN_INVALID_DATE_TIME = 122; 

const int LIBFPTR_ERROR_FN_NO_MORE_DATA = 123; 

const int LIBFPTR_ERROR_FN_TOTAL_OVERFLOW = 124; 

const int LIBFPTR_ERROR_BUFFER_OVERFLOW = 125; 

const int LIBFPTR_ERROR_PRINT_SECOND_COPY_DENIED = 126; 

const int LIBFPTR_ERROR_NEED_RESET_JOURNAL = 127; 

const int LIBFPTR_ERROR_TAX_SUM_TOO_MUCH = 128; 

const int LIBFPTR_ERROR_TAX_ON_LAST_OPERATION_DENIED = 129; 

const int LIBFPTR_ERROR_INVALID_FN_NUMBER = 130; 

const int LIBFPTR_ERROR_TAX_CANCEL_DENIED = 131; 

const int LIBFPTR_ERROR_LOW_BATTERY = 132; 

const int LIBFPTR_ERROR_FN_INVALID_COMMAND = 133; 

const int LIBFPTR_ERROR_FN_COMMAND_OVERFLOW = 134; 

const int LIBFPTR_ERROR_FN_NO_TRANSPORT_CONNECTION = 135; 

const int LIBFPTR_ERROR_FN_CRYPTO_HAS_EXPIRED = 136; 

const int LIBFPTR_ERROR_FN_RESOURCE_HAS_EXPIRED = 137; 

const int LIBFPTR_ERROR_INVALID_MESSAGE_FROM_OFD = 138; 

const int LIBFPTR_ERROR_FN_HAS_NOT_SEND_DOCUMENTS = 139; 

const int LIBFPTR_ERROR_FN_TIMEOUT = 140; 

const int LIBFPTR_ERROR_FN_SHIFT_EXPIRED = 141; 

const int LIBFPTR_ERROR_FN_INVALID_TIME_DIFFERENCE = 142; 

const int LIBFPTR_ERROR_INVALID_TAXATION_TYPE = 143; 

const int LIBFPTR_ERROR_INVALID_TAX_TYPE = 144; 

const int LIBFPTR_ERROR_INVALID_COMMODITY_PAYMENT_TYPE = 145; 

const int LIBFPTR_ERROR_INVALID_COMMODITY_CODE_TYPE = 146; 

const int LIBFPTR_ERROR_EXCISABLE_COMMODITY_DENIED = 147; 

const int LIBFPTR_ERROR_FISCAL_PROPERTY_WRITE = 148; 

const int LIBFPTR_ERROR_INVALID_COUNTER_TYPE = 149; 

const int LIBFPTR_ERROR_CUTTER_FAULT = 150; 

const int LIBFPTR_ERROR_REPORT_INTERRUPTED = 151; 

const int LIBFPTR_ERROR_INVALID_LEFT_MARGIN = 152; 

const int LIBFPTR_ERROR_INVALID_ALIGNMENT = 153; 

const int LIBFPTR_ERROR_INVALID_TAX_MODE = 154; 

const int LIBFPTR_ERROR_FILE_NOT_FOUND = 155; 

const int LIBFPTR_ERROR_PICTURE_TOO_BIG = 156; 

const int LIBFPTR_ERROR_INVALID_BARCODE_PARAMS = 157; 

const int LIBFPTR_ERROR_FISCAL_PROPERTY_DENIED = 158; 

const int LIBFPTR_ERROR_FN_INTERFACE = 159; 

const int LIBFPTR_ERROR_DATA_DUPLICATE = 160; 

const int LIBFPTR_ERROR_NO_REQUIRED_FISCAL_PROPERTY = 161; 

const int LIBFPTR_ERROR_FN_READ_DOCUMENT = 162; 

const int LIBFPTR_ERROR_FLOAT_OVERFLOW = 163; 

const int LIBFPTR_ERROR_INVALID_SETTING_VALUE = 164; 

const int LIBFPTR_ERROR_HARD_FAULT = 165; 

const int LIBFPTR_ERROR_FN_NOT_FOUND = 166; 

const int LIBFPTR_ERROR_INVALID_AGENT_FISCAL_PROPERTY = 167; 

const int LIBFPTR_ERROR_INVALID_FISCAL_PROPERTY_VALUE_1002_1056 = 168; 

const int LIBFPTR_ERROR_INVALID_FISCAL_PROPERTY_VALUE_1002_1017 = 169; 

const int LIBFPTR_ERROR_SCRIPT = 170; 

const int LIBFPTR_ERROR_INVALID_USER_MEMORY_INDEX = 171; 

const int LIBFPTR_ERROR_NO_ACTIVE_OPERATOR = 172; 

const int LIBFPTR_ERROR_REGISTRATION_REPORT_INTERRUPTED = 173; 

const int LIBFPTR_ERROR_CLOSE_FN_REPORT_INTERRUPTED = 174; 

const int LIBFPTR_ERROR_OPEN_SHIFT_REPORT_INTERRUPTED = 175; 

const int LIBFPTR_ERROR_OFD_EXCHANGE_REPORT_INTERRUPTED = 176; 

const int LIBFPTR_ERROR_CLOSE_RECEIPT_INTERRUPTED = 177; 

const int LIBFPTR_ERROR_FN_QUERY_INTERRUPTED = 178; 

const int LIBFPTR_ERROR_RTC_FAULT = 179; 

const int LIBFPTR_ERROR_MEMORY_FAULT = 180; 

const int LIBFPTR_ERROR_CHIP_FAULT = 181; 

const int LIBFPTR_ERROR_TEMPLATES_CORRUPTED = 182; 

const int LIBFPTR_ERROR_INVALID_MAC_ADDRESS = 183; 

const int LIBFPTR_ERROR_INVALID_SCRIPT_NUMBER = 184; 

const int LIBFPTR_ERROR_SCRIPTS_FAULT = 185; 

const int LIBFPTR_ERROR_INVALID_SCRIPTS_VERSION = 186; 

const int LIBFPTR_ERROR_INVALID_CLICHE_FORMAT = 187; 

const int LIBFPTR_ERROR_WAIT_FOR_REBOOT = 188; 

const int LIBFPTR_ERROR_NO_LICENSE = 189; 

const int LIBFPTR_ERROR_INVALID_FFD_VERSION = 190; 

const int LIBFPTR_ERROR_CHANGE_SETTING_DENIED = 191; 

const int LIBFPTR_ERROR_INVALID_NOMENCLATURE_TYPE = 192; 

const int LIBFPTR_ERROR_INVALID_GTIN = 193; 

const int LIBFPTR_ERROR_NEGATIVE_MATH_RESULT = 194; 

const int LIBFPTR_ERROR_FISCAL_PROPERTIES_COMBINATION = 195; 

const int LIBFPTR_ERROR_OPERATOR_LOGIN = 196; 

const int LIBFPTR_ERROR_INVALID_INTERNET_CHANNEL = 197; 

const int LIBFPTR_ERROR_DATETIME_NOT_SYNCRONIZED = 198; 

const int LIBFPTR_ERROR_JOURNAL = 199; 

const int LIBFPTR_ERROR_DENIED_IN_OPENED_DOC = 200; 

const int LIBFPTR_ERROR_DENIED_IN_CLOSED_DOC = 201; 

const int LIBFPTR_ERROR_LICENSE_MEMORY_OVERFLOW = 202; 

const int LIBFPTR_ERROR_NEED_CANCEL_DOCUMENT = 203; 

const int LIBFPTR_ERROR_REGISTERS_NOT_INITIALIZED = 204; 

const int LIBFPTR_ERROR_TOTAL_REQUIRED = 205; 

const int LIBFPTR_ERROR_SETTINGS_FAULT = 206; 

const int LIBFPTR_ERROR_COUNTERS_FAULT = 207; 

const int LIBFPTR_ERROR_USER_MEMORY_FAULT = 208; 

const int LIBFPTR_ERROR_SERVICE_COUNTERS_FAULT = 209; 

const int LIBFPTR_ERROR_ATTRIBUTES_FAULT = 210; 

const int LIBFPTR_ERROR_ALREADY_IN_UPDATE_MODE = 211; 

const int LIBFPTR_ERROR_INVALID_FIRMWARE = 212; 

const int LIBFPTR_ERROR_INVALID_CHANNEL = 213; 

const int LIBFPTR_ERROR_INTERFACE_DOWN = 214; 

const int LIBFPTR_ERROR_INVALID_FISCAL_PROPERTY_VALUE_1212_1030 = 215; 

const int LIBFPTR_ERROR_INVALID_FISCAL_PROPERTY_VALUE_1214 = 216; 

const int LIBFPTR_ERROR_INVALID_FISCAL_PROPERTY_VALUE_1212 = 217; 

const int LIBFPTR_ERROR_SYNC_TIME = 218; 

const int LIBFPTR_ERROR_VAT18_VAT20_IN_RECEIPT = 219; 

const int LIBFPTR_ERROR_PICTURE_NOT_CLOSED = 220; 

const int LIBFPTR_ERROR_INTERFACE_BUSY = 221; 

const int LIBFPTR_ERROR_INVALID_PICTURE_NUMBER = 222; 

const int LIBFPTR_ERROR_INVALID_CONTAINER = 223; 

const int LIBFPTR_ERROR_ARCHIVE_CLOSED = 224; 

const int LIBFPTR_ERROR_NEED_REGISTRATION = 225; 

const int LIBFPTR_ERROR_DENIED_DURING_UPDATE = 226; 

const int LIBFPTR_ERROR_INVALID_TOTAL = 227; 

const int LIBFPTR_ERROR_MARKING_CODE_CONFLICT = 228; 

const int LIBFPTR_ERROR_INVALID_RECORDS_ID = 229; 

const int LIBFPTR_ERROR_INVALID_SIGNATURE = 230; 

const int LIBFPTR_ERROR_INVALID_EXCISE_SUM = 231; 

const int LIBFPTR_ERROR_NO_DOCUMENTS_FOUND_IN_JOURNAL = 232; 

const int LIBFPTR_ERROR_INVALID_SCRIPT_TYPE = 233; 

const int LIBFPTR_ERROR_INVALID_SCRIPT_NAME = 234; 

const int LIBFPTR_ERROR_INVALID_POSITIONS_COUNT_WITH_1162 = 235; 

const int LIBFPTR_ERROR_INVALID_UC_COUNTER = 236; 

const int LIBFPTR_ERROR_INVALID_UC_TAG = 237; 

const int LIBFPTR_ERROR_INVALID_UC_IDX = 238; 

const int LIBFPTR_ERROR_INVALID_UC_SIZE = 239; 

const int LIBFPTR_ERROR_INVALID_UC_CONFIG = 240; 

const int LIBFPTR_ERROR_CONNECTION_LOST = 241; 

const int LIBFPTR_ERROR_UNIVERSAL_COUNTERS_FAULT = 242; 

const int LIBFPTR_ERROR_INVALID_TAX_SUM = 243; 

const int LIBFPTR_ERROR_INVALID_MARKING_CODE_TYPE = 244; 

const int LIBFPTR_ERROR_LICENSE_HARD_FAULT = 245; 

const int LIBFPTR_ERROR_LICENSE_INVALID_SIGN = 246; 

const int LIBFPTR_ERROR_LICENSE_INVALID_SERIAL = 247; 

const int LIBFPTR_ERROR_LICENSE_INVALID_TIME = 248; 

const int LIBFPTR_ERROR_DOCUMENT_CANCELED = 249; 

const int LIBFPTR_ERROR_INVALID_SCRIPT_PARAMS = 250; 

const int LIBFPTR_ERROR_CLICHE_TOO_LONG = 251; 

const int LIBFPTR_ERROR_COMMODITIES_TABLE_FAULT = 252; 

const int LIBFPTR_ERROR_COMMODITIES_TABLE = 253; 

const int LIBFPTR_ERROR_COMMODITIES_TABLE_INVALID_TAG = 254; 

const int LIBFPTR_ERROR_COMMODITIES_TABLE_INVALID_TAG_SIZE = 255; 

const int LIBFPTR_ERROR_COMMODITIES_TABLE_NO_TAG_DATA = 256; 

const int LIBFPTR_ERROR_COMMODITIES_TABLE_NO_FREE_MEMORY = 257; 

const int LIBFPTR_ERROR_INVALID_CACHE = 258; 

const int LIBFPTR_ERROR_SCHEDULER_NOT_READY = 259; 

const int LIBFPTR_ERROR_SCHEDULER_INVALID_TASK = 260; 

const int LIBFPTR_ERROR_MINIPOS_NO_POSITION_PAYMENT = 261; 

const int LIBFPTR_ERROR_MINIPOS_COMMAND_TIME_OUT = 262; 

const int LIBFPTR_ERROR_MINIPOS_MODE_FR_DISABLED = 263; 

const int LIBFPTR_ERROR_ENTRY_NOT_FOUND_IN_OTP = 264; 

const int LIBFPTR_ERROR_EXCISABLE_COMMODITY_WITHOUT_EXCISE = 265; 

const int LIBFPTR_ERROR_BARCODE_TYPE_NOT_SUPPORTED = 266; 

const int LIBFPTR_ERROR_OVERLAY_DATA_OVERFLOW = 267; 

const int LIBFPTR_ERROR_INVALID_MODULE_ADDRESS = 268; 

const int LIBFPTR_ERROR_ECR_MODEL_NOT_SUPPORTED = 269; 

const int LIBFPTR_ERROR_PAID_NOT_REQUIRED = 270; 

const int LIBFPTR_ERROR_NON_PRINTABLE_CHAR = 271; 

const int LIBFPTR_ERROR_INVALID_USER_TAG = 272; 

const int LIBFPTR_ERROR_COMMODITIES_TABLE_ITERATION_STOPPED = 273; 

const int LIBFPTR_ERROR_COMMODITIES_TABLE_INVALID_CSV_FORMAT = 274; 

const int LIBFPTR_ERROR_MINIPOS_NO_FILE_ON_USB_STORE = 275; 

const int LIBFPTR_ERROR_MINIPOS_NO_AGENT_FISCAL_PROPERTY = 276; 

const int LIBFPTR_ERROR_NO_CONNECTION_WITH_PRINT_SERVICE = 277; 

const int LIBFPTR_ERROR_UNIVERSAL_COUNTERS_ARE_DISABLED = 278; 

const int LIBFPTR_ERROR_BASE_MARKING = 400; 

const int LIBFPTR_ERROR_MARKING_CODE_VALIDATION_IN_PROGRESS = 401; 

const int LIBFPTR_ERROR_NO_CONNECTION_WITH_SERVER = 402; 

const int LIBFPTR_ERROR_MARKING_CODE_VALIDATION_CANCELED = 403; 

const int LIBFPTR_ERROR_INVALID_MARKING_CODE_STATUS = 404; 

const int LIBFPTR_ERROR_INVALID_GS1 = 405; 

const int LIBFPTR_ERROR_MARKING_WORK_DENIED = 406; 

const int LIBFPTR_ERROR_MARKING_WORK_TEMPORARY_BLOCKED = 407; 

const int LIBFPTR_ERROR_MARKS_OVERFLOW = 408; 

const int LIBFPTR_ERROR_INVALID_MARKING_CODE = 409; 

const int LIBFPTR_ERROR_INVALID_STATE = 410; 

const int LIBFPTR_ERROR_OFD_EXCHANGE = 411; 

const int LIBFPTR_ERROR_INVALID_MEASUREMENT_UNIT = 412; 

const int LIBFPTR_ERROR_OPERATION_DENIED_IN_CURRENT_FFD = 413; 

const int LIBFPTR_ERROR_MARKING_OPERATION_DENIED = 414; 

const int LIBFPTR_ERROR_NO_DATA_TO_SEND = 415; 

const int LIBFPTR_ERROR_NO_MARKED_POSITION = 416; 

const int LIBFPTR_ERROR_HAS_NOT_SEND_NOTICES = 417; 

const int LIBFPTR_ERROR_UPDATE_KEYS_REQUIRED = 418; 

const int LIBFPTR_ERROR_UPDATE_KEYS_SERVICE = 419; 

const int LIBFPTR_ERROR_MARK_NOT_CHECKED = 420; 

const int LIBFPTR_ERROR_MARK_CHECK_TIMEOUT_EXPIRED = 421; 

const int LIBFPTR_ERROR_NO_MARKING_CODE_IN_TABLE = 422; 

const int LIBFPTR_ERROR_CHEKING_MARK_IN_PROGRESS = 423; 

const int LIBFPTR_ERROR_INVALID_SERVER_ADDRESS = 424; 

const int LIBFPTR_ERROR_UPDATE_KEYS_TIMEOUT = 425; 

const int LIBFPTR_ERROR_PROPERTY_FOR_MARKING_POSITION_ONLY = 426; 

const int LIBFPTR_ERROR_MARKING_END = 499; 

const int LIBFPTR_ERROR_BASE_WEB = 500; 

const int LIBFPTR_ERROR_RECEIPT_PARSE_ERROR = 501; 

const int LIBFPTR_ERROR_INTERRUPTED_BY_PREVIOUS_ERRORS = 502; 

const int LIBFPTR_ERROR_DRIVER_SCRIPT_ERROR = 503; 

const int LIBFPTR_ERROR_VALIDATE_FUNC_NOT_FOUND = 504; 

const int LIBFPTR_ERROR_WEB_FAIL = 505; 

const int LIBFPTR_ERROR_WEB_END = 599; 

const int LIBFPTR_PORT_COM = 0; 

const int LIBFPTR_PORT_USB = 1; 

const int LIBFPTR_PORT_TCPIP = 2; 

const int LIBFPTR_PORT_BLUETOOTH = 3; 

const int LIBFPTR_PORT_BITS_7 = 7; 

const int LIBFPTR_PORT_BITS_8 = 8; 

const int LIBFPTR_PORT_PARITY_NO = 0; 

const int LIBFPTR_PORT_PARITY_ODD = 1; 

const int LIBFPTR_PORT_PARITY_EVEN = 2; 

const int LIBFPTR_PORT_PARITY_MARK = 3; 

const int LIBFPTR_PORT_PARITY_SPACE = 4; 

const int LIBFPTR_PORT_SB_1 = 0; 

const int LIBFPTR_PORT_SB_1_5 = 1; 

const int LIBFPTR_PORT_SB_2 = 2; 

const int LIBFPTR_BT_EAN_8 = 0; 

const int LIBFPTR_BT_EAN_13 = 1; 

const int LIBFPTR_BT_UPC_A = 2; 

const int LIBFPTR_BT_UPC_E = 3; 

const int LIBFPTR_BT_CODE_39 = 4; 

const int LIBFPTR_BT_CODE_93 = 5; 

const int LIBFPTR_BT_CODE_128 = 6; 

const int LIBFPTR_BT_CODABAR = 7; 

const int LIBFPTR_BT_ITF = 8; 

const int LIBFPTR_BT_ITF_14 = 9; 

const int LIBFPTR_BT_GS1_128 = 10; 

const int LIBFPTR_BT_QR = 11; 

const int LIBFPTR_BT_PDF417 = 12; 

const int LIBFPTR_BT_AZTEC = 13; 

const int LIBFPTR_BT_CODE_39_EXTENDED = 14; 

const int LIBFPTR_BC_DEFAULT = 0; 

const int LIBFPTR_BC_0 = 1; 

const int LIBFPTR_BC_1 = 2; 

const int LIBFPTR_BC_2 = 3; 

const int LIBFPTR_BC_3 = 4; 

const int LIBFPTR_BC_4 = 5; 

const int LIBFPTR_BC_5 = 6; 

const int LIBFPTR_BC_6 = 7; 

const int LIBFPTR_BC_7 = 8; 

const int LIBFPTR_BC_8 = 9; 

const int LIBFPTR_TM_POSITION = 0; 

const int LIBFPTR_TM_UNIT = 1; 

const int LIBFPTR_SCT_OVERALL = 0; 

const int LIBFPTR_SCT_FORWARD = 1; 

const int LIBFPTR_CT_ROLLUP = 0; 

const int LIBFPTR_CT_RESETTABLE = 1; 

const int LIBFPTR_SS_CLOSED = 0; 

const int LIBFPTR_SS_OPENED = 1; 

const int LIBFPTR_SS_EXPIRED = 2; 

const int LIBFPTR_CT_FULL = 0; 

const int LIBFPTR_CT_PART = 1; 

const int LIBFPTR_ALIGNMENT_LEFT = 0; 

const int LIBFPTR_ALIGNMENT_CENTER = 1; 

const int LIBFPTR_ALIGNMENT_RIGHT = 2; 

const int LIBFPTR_TW_NONE = 0; 

const int LIBFPTR_TW_WORDS = 1; 

const int LIBFPTR_TW_CHARS = 2; 

const int LIBFPTR_FNT_DEBUG = 0; 

const int LIBFPTR_FNT_RELEASE = 1; 

const int LIBFPTR_FNT_UNKNOWN = 2; 

const int LIBFPTR_RT_CLOSE_SHIFT = 0; 

const int LIBFPTR_RT_X = 1; 

const int LIBFPTR_RT_LAST_DOCUMENT = 2; 

const int LIBFPTR_RT_OFD_EXCHANGE_STATUS = 3; 

const int LIBFPTR_RT_KKT_DEMO = 4; 

const int LIBFPTR_RT_KKT_INFO = 5; 

const int LIBFPTR_RT_OFD_TEST = 6; 

const int LIBFPTR_RT_FN_DOC_BY_NUMBER = 7; 

const int LIBFPTR_RT_QUANTITY = 8; 

const int LIBFPTR_RT_DEPARTMENTS = 9; 

const int LIBFPTR_RT_OPERATORS = 10; 

const int LIBFPTR_RT_HOURS = 11; 

const int LIBFPTR_RT_FN_REGISTRATIONS = 12; 

const int LIBFPTR_RT_FN_SHIFT_TOTAL_COUNTERS = 13; 

const int LIBFPTR_RT_FN_TOTAL_COUNTERS = 14; 

const int LIBFPTR_RT_FN_NOT_SENT_DOCUMENTS_COUNTERS = 15; 

const int LIBFPTR_RT_COMMODITIES_BY_TAXATION_TYPES = 16; 

const int LIBFPTR_RT_COMMODITIES_BY_DEPARTMENTS = 17; 

const int LIBFPTR_RT_COMMODITIES_BY_SUMS = 18; 

const int LIBFPTR_RT_START_SERVICE = 19; 

const int LIBFPTR_RT_DISCOUNTS = 20; 

const int LIBFPTR_RT_JOURNAL_DOCUMENT_BY_NUMBERS = 21; 

const int LIBFPTR_RT_JOURNAL_DOCUMENT_BY_SHIFTS = 22; 

const int LIBFPTR_RT_CLOSE_SHIFT_REPORTS = 23; 

const int LIBFPTR_PT_CASH = 0; 

const int LIBFPTR_PT_ELECTRONICALLY = 1; 

const int LIBFPTR_PT_PREPAID = 2; 

const int LIBFPTR_PT_CREDIT = 3; 

const int LIBFPTR_PT_OTHER = 4; 

const int LIBFPTR_PT_6 = 5; 

const int LIBFPTR_PT_7 = 6; 

const int LIBFPTR_PT_8 = 7; 

const int LIBFPTR_PT_9 = 8; 

const int LIBFPTR_PT_10 = 9; 

const int LIBFPTR_TAX_DEPARTMENT = 0; 

const int LIBFPTR_TAX_VAT18 = 1; 

const int LIBFPTR_TAX_VAT10 = 2; 

const int LIBFPTR_TAX_VAT118 = 3; 

const int LIBFPTR_TAX_VAT110 = 4; 

const int LIBFPTR_TAX_VAT0 = 5; 

const int LIBFPTR_TAX_NO = 6; 

const int LIBFPTR_TAX_VAT20 = 7; 

const int LIBFPTR_TAX_VAT120 = 8; 

const int LIBFPTR_TAX_VAT5 = 9; 

const int LIBFPTR_TAX_VAT7 = 10; 

const int LIBFPTR_TAX_VAT105 = 11; 

const int LIBFPTR_TAX_VAT107 = 12; 

const int LIBFPTR_TAX_INVALID = 13; 

const int LIBFPTR_EXTERNAL_DEVICE_DISPLAY = 0; 

const int LIBFPTR_EXTERNAL_DEVICE_PINPAD = 1; 

const int LIBFPTR_EXTERNAL_DEVICE_MODEM = 2; 

const int LIBFPTR_EXTERNAL_DEVICE_BARCODE_SCANNER = 3; 

const int LIBFPTR_DT_STATUS = 0; 

const int LIBFPTR_DT_CASH_SUM = 1; 

const int LIBFPTR_DT_UNIT_VERSION = 2; 

const int LIBFPTR_DT_PICTURE_INFO = 3; 

const int LIBFPTR_DT_LICENSE_ACTIVATED = 4; 

const int LIBFPTR_DT_REGISTRATIONS_SUM = 5; 

const int LIBFPTR_DT_REGISTRATIONS_COUNT = 6; 

const int LIBFPTR_DT_PAYMENT_SUM = 7; 

const int LIBFPTR_DT_CASHIN_SUM = 8; 

const int LIBFPTR_DT_CASHIN_COUNT = 9; 

const int LIBFPTR_DT_CASHOUT_SUM = 10; 

const int LIBFPTR_DT_CASHOUT_COUNT = 11; 

const int LIBFPTR_DT_REVENUE = 12; 

const int LIBFPTR_DT_DATE_TIME = 13; 

const int LIBFPTR_DT_SHIFT_STATE = 14; 

const int LIBFPTR_DT_RECEIPT_STATE = 15; 

const int LIBFPTR_DT_SERIAL_NUMBER = 16; 

const int LIBFPTR_DT_MODEL_INFO = 17; 

const int LIBFPTR_DT_RECEIPT_LINE_LENGTH = 18; 

const int LIBFPTR_DT_CUTTER_RESOURCE = 19; 

const int LIBFPTR_DT_STEP_RESOURCE = 20; 

const int LIBFPTR_DT_TERMAL_RESOURCE = 21; 

const int LIBFPTR_DT_ENVD_MODE = 22; 

const int LIBFPTR_DT_SHIFT_TAX_SUM = 23; 

const int LIBFPTR_DT_RECEIPT_TAX_SUM = 24; 

const int LIBFPTR_DT_NON_NULLABLE_SUM = 25; 

const int LIBFPTR_DT_RECEIPT_COUNT = 26; 

const int LIBFPTR_DT_CANCELLATION_COUNT_ALL = 27; 

const int LIBFPTR_DT_CANCELLATION_SUM = 28; 

const int LIBFPTR_DT_CANCELLATION_SUM_ALL = 29; 

const int LIBFPTR_DT_POWER_SOURCE_STATE = 30; 

const int LIBFPTR_DT_CANCELLATION_COUNT = 31; 

const int LIBFPTR_DT_NON_NULLABLE_SUM_BY_PAYMENTS = 32; 

const int LIBFPTR_DT_PRINTER_TEMPERATURE = 33; 

const int LIBFPTR_DT_FATAL_STATUS = 34; 

const int LIBFPTR_DT_MAC_ADDRESS = 35; 

const int LIBFPTR_DT_DEVICE_UPTIME = 36; 

const int LIBFPTR_DT_RECEIPT_BYTE_COUNT = 37; 

const int LIBFPTR_DT_DISCOUNT_AND_SURCHARGE_SUM = 38; 

const int LIBFPTR_DT_LK_USER_CODE = 39; 

const int LIBFPTR_DT_LAST_SENT_OFD_DOCUMENT_DATE_TIME = 40; 

const int LIBFPTR_DT_SHORT_STATUS = 41; 

const int LIBFPTR_DT_PICTURES_ARRAY_INFO = 42; 

const int LIBFPTR_DT_ETHERNET_INFO = 43; 

const int LIBFPTR_DT_SCRIPTS_INFO = 44; 

const int LIBFPTR_DT_SHIFT_TOTALS = 45; 

const int LIBFPTR_DT_WIFI_INFO = 46; 

const int LIBFPTR_DT_FONT_INFO = 47; 

const int LIBFPTR_DT_SOFTLOCK_STATUS = 48; 

const int LIBFPTR_DT_LAST_SENT_ISM_NOTICE_DATE_TIME = 49; 

const int LIBFPTR_DT_MCU_INFO = 50; 

const int LIBFPTR_DT_MODULE_ADDRESS = 51; 

const int LIBFPTR_DT_CACHE_REQUISITES = 52; 

const int LIBFPTR_DT_DEPARTMENT_SUM = 53; 

const int LIBFPTR_DT_MCU_TEMPERATURE = 54; 

const int LIBFPTR_DT_AVAILABLE_OPERATIONS = 55; 

const int LIBFPTR_DT_PATTERN_PARAMETERS = 56; 

const int LIBFPTR_DT_RECEIPT_TAPE_PATH_LENGTH = 57; 

const int LIBFPTR_FNDT_TAG_VALUE = 0; 

const int LIBFPTR_FNDT_OFD_EXCHANGE_STATUS = 1; 

const int LIBFPTR_FNDT_FN_INFO = 2; 

const int LIBFPTR_FNDT_LAST_REGISTRATION = 3; 

const int LIBFPTR_FNDT_LAST_RECEIPT = 4; 

const int LIBFPTR_FNDT_LAST_DOCUMENT = 5; 

const int LIBFPTR_FNDT_SHIFT = 6; 

const int LIBFPTR_FNDT_FFD_VERSIONS = 7; 

const int LIBFPTR_FNDT_VALIDITY = 8; 

const int LIBFPTR_FNDT_REG_INFO = 9; 

const int LIBFPTR_FNDT_DOCUMENTS_COUNT_IN_SHIFT = 10; 

const int LIBFPTR_FNDT_ERRORS = 11; 

const int LIBFPTR_FNDT_TICKET_BY_DOC_NUMBER = 12; 

const int LIBFPTR_FNDT_DOCUMENT_BY_NUMBER = 13; 

const int LIBFPTR_FNDT_REGISTRATION_TLV = 14; 

const int LIBFPTR_FNDT_ERROR_DETAIL = 15; 

const int LIBFPTR_FNDT_VALIDITY_DAYS = 16; 

const int LIBFPTR_FNDT_FREE_MEMORY = 17; 

const int LIBFPTR_FNDT_TOTALS = 18; 

const int LIBFPTR_FNDT_ISM_ERRORS = 19; 

const int LIBFPTR_FNDT_ISM_EXCHANGE_STATUS = 20; 

const int LIBFPTR_FNDT_MARKING_MODE_STATUS = 21; 

const int LIBFPTR_FNDT_CHECK_MARK_TIME = 22; 

const int LIBFPTR_FNDT_RECEIPT_SIZE = 23; 

const int LIBFPTR_FNDT_NOTIFICATION_STATUS = 24; 

const int LIBFPTR_FNDT_FNM_KEYS_UPDATE_DATE_TIME = 25; 

const int LIBFPTR_UT_FIRMWARE = 0; 

const int LIBFPTR_UT_CONFIGURATION = 1; 

const int LIBFPTR_UT_TEMPLATES = 2; 

const int LIBFPTR_UT_CONTROL_UNIT = 3; 

const int LIBFPTR_UT_BOOT = 4; 

const int LIBFPTR_FNOP_REGISTRATION = 0; 

const int LIBFPTR_FNOP_CHANGE_FN = 1; 

const int LIBFPTR_FNOP_CHANGE_PARAMETERS = 2; 

const int LIBFPTR_FNOP_CLOSE_ARCHIVE = 3; 

const int LIBFPTR_OFD_CHANNEL_NONE = 0; 

const int LIBFPTR_OFD_CHANNEL_USB = 1; 

const int LIBFPTR_OFD_CHANNEL_PROTO = 2; 

const int LIBFPTR_OFD_CHANNEL_AUTO = 2; 

const int LIBFPTR_PST_POWER_SUPPLY = 0; 

const int LIBFPTR_PST_RTC_BATTERY = 1; 

const int LIBFPTR_PST_BATTERY = 2; 

const int LIBFPTR_RT_LAST_DOCUMENT_LINES = 0; 

const int LIBFPTR_RT_FN_DOCUMENT_TLVS = 1; 

const int LIBFPTR_RT_EXEC_USER_SCRIPT = 2; 

const int LIBFPTR_RT_FIRMWARE = 3; 

const int LIBFPTR_RT_LICENSES = 4; 

const int LIBFPTR_RT_FN_REGISTRATION_TLVS = 5; 

const int LIBFPTR_RT_PARSE_COMPLEX_ATTR = 6; 

const int LIBFPTR_RT_FN_SUM_COUNTERS = 7; 

const int LIBFPTR_RT_FN_QUANTITY_COUNTERS = 8; 

const int LIBFPTR_RT_FN_UNSENT_DOCS_COUNTERS = 9; 

const int LIBFPTR_RT_SETTINGS = 10; 

const int LIBFPTR_RT_RUN_COMMAND = 11; 

const int LIBFPTR_LOG_ERROR = 0; 

const int LIBFPTR_LOG_WARN = 1; 

const int LIBFPTR_LOG_INFO = 2; 

const int LIBFPTR_LOG_DEBUG = 3; 

const std::wstring LIBFPTR_SETTING_LIBRARY_PATH = L"LibraryPath"; 

const std::wstring LIBFPTR_SETTING_MODEL = L"Model"; 

const std::wstring LIBFPTR_SETTING_PORT = L"Port"; 

const std::wstring LIBFPTR_SETTING_BAUDRATE = L"BaudRate"; 

const std::wstring LIBFPTR_SETTING_BITS = L"Bits"; 

const std::wstring LIBFPTR_SETTING_PARITY = L"Parity"; 

const std::wstring LIBFPTR_SETTING_STOPBITS = L"StopBits"; 

const std::wstring LIBFPTR_SETTING_IPADDRESS = L"IPAddress"; 

const std::wstring LIBFPTR_SETTING_IPPORT = L"IPPort"; 

const std::wstring LIBFPTR_SETTING_MACADDRESS = L"MACAddress"; 

const std::wstring LIBFPTR_SETTING_COM_FILE = L"ComFile"; 

const std::wstring LIBFPTR_SETTING_USB_DEVICE_PATH = L"UsbDevicePath"; 

const std::wstring LIBFPTR_SETTING_BT_AUTOENABLE = L"AutoEnableBluetooth"; 

const std::wstring LIBFPTR_SETTING_BT_AUTODISABLE = L"AutoDisableBluetooth"; 

const std::wstring LIBFPTR_SETTING_ACCESS_PASSWORD = L"AccessPassword"; 

const std::wstring LIBFPTR_SETTING_USER_PASSWORD = L"UserPassword"; 

const std::wstring LIBFPTR_SETTING_OFD_CHANNEL = L"OfdChannel"; 

const std::wstring LIBFPTR_SETTING_EXISTED_COM_FILES = L"ExistedComFiles"; 

const std::wstring LIBFPTR_SETTING_SCRIPTS_PATH = L"ScriptsPath"; 

const std::wstring LIBFPTR_SETTING_DOCUMENTS_JOURNAL_PATH = L"DocumentsJournalPath"; 

const std::wstring LIBFPTR_SETTING_USE_DOCUMENTS_JOURNAL = L"UseDocumentsJournal"; 

const std::wstring LIBFPTR_SETTING_AUTO_RECONNECT = L"AutoReconnect"; 

const std::wstring LIBFPTR_SETTING_INVERT_CASH_DRAWER_STATUS = L"InvertCashDrawerStatus"; 

const std::wstring LIBFPTR_SETTING_REMOTE_SERVER_ADDR = L"RemoteServerAddr"; 

const std::wstring LIBFPTR_SETTING_REMOTE_SERVER_CONNECTION_TIMEOUT = L"RemoteServerConnectionTimeout"; 

const std::wstring LIBFPTR_SETTING_VALIDATE_MARK_WITH_FNM_ONLY = L"ValidateMarksWithFnmOnly"; 

const std::wstring LIBFPTR_SETTING_AUTO_MEASUREMENT_UNIT = L"AutoMeasurementUnit"; 

const std::wstring LIBFPTR_SETTING_SILENT_REBOOT = L"SilentReboot"; 

const std::wstring LIBFPTR_SETTING_LOG_PATHS = L"LogPaths"; 

const std::wstring LIBFPTR_SETTING_AUTO_TIME_SYNC = L"AutoTimeSync"; 

const std::wstring LIBFPTR_SETTING_AUTO_TIME_SYNC_TIME = L"AutoTimeSyncTime"; 

const std::wstring LIBFPTR_SETTING_MERGE_RECEIPT_ITEMS = L"MergeReceiptItems"; 

const int LIBFPTR_MODEL_UNKNOWN = 0; 

const int LIBFPTR_MODEL_ATOL_25F = 57; 

const int LIBFPTR_MODEL_ATOL_30F = 61; 

const int LIBFPTR_MODEL_ATOL_55F = 62; 

const int LIBFPTR_MODEL_ATOL_22F = 63; 

const int LIBFPTR_MODEL_ATOL_52F = 64; 

const int LIBFPTR_MODEL_ATOL_11F = 67; 

const int LIBFPTR_MODEL_ATOL_77F = 69; 

const int LIBFPTR_MODEL_ATOL_90F = 72; 

const int LIBFPTR_MODEL_ATOL_60F = 75; 

const int LIBFPTR_MODEL_ATOL_42FS = 77; 

const int LIBFPTR_MODEL_ATOL_15F = 78; 

const int LIBFPTR_MODEL_ATOL_50F = 80; 

const int LIBFPTR_MODEL_ATOL_20F = 81; 

const int LIBFPTR_MODEL_ATOL_91F = 82; 

const int LIBFPTR_MODEL_ATOL_92F = 84; 

const int LIBFPTR_MODEL_ATOL_SIGMA_10 = 86; 

const int LIBFPTR_MODEL_ATOL_27F = 87; 

const int LIBFPTR_MODEL_ATOL_SIGMA_7F = 90; 

const int LIBFPTR_MODEL_ATOL_SIGMA_8F = 91; 

const int LIBFPTR_MODEL_ATOL_1F = 93; 

const int LIBFPTR_MODEL_KAZNACHEY_FA = 76; 

const int LIBFPTR_MODEL_ATOL_22V2F = 95; 

const int LIBFPTR_MODEL_ATOL_AUTO = 500; 

const int LIBFPTR_MODEL_ATOL_47FA = 48; 

const int LIBFPTR_MODEL_ATOL_PT_5F = 89; 

const int LIBFPTR_MODEL_ATOL_27_FP7_F = 99; 

const int LIBFPTR_MODEL_ATOL_42FA = 70; 

const int LIBFPTR_MODEL_ALLIANCE_20F = 50; 

const int LIBFPTR_MODEL_ATOL_55V2F = 66; 

const int LIBFPTR_MODEL_ATOL_STB_6F = 92; 

const int LIBFPTR_MODEL_ATOL_35F = 97; 

const int LIBFPTR_PORT_BR_1200 = 1200; 

const int LIBFPTR_PORT_BR_2400 = 2400; 

const int LIBFPTR_PORT_BR_4800 = 4800; 

const int LIBFPTR_PORT_BR_9600 = 9600; 

const int LIBFPTR_PORT_BR_19200 = 19200; 

const int LIBFPTR_PORT_BR_38400 = 38400; 

const int LIBFPTR_PORT_BR_57600 = 57600; 

const int LIBFPTR_PORT_BR_115200 = 115200; 

const int LIBFPTR_PORT_BR_230400 = 230400; 

const int LIBFPTR_PORT_BR_460800 = 460800; 

const int LIBFPTR_PORT_BR_921600 = 921600; 

const int LIBFPTR_FNS_INITIAL = 0; 

const int LIBFPTR_FNS_CONFIGURED = 1; 

const int LIBFPTR_FNS_FISCAL_MODE = 3; 

const int LIBFPTR_FNS_POSTFISCAL_MODE = 7; 

const int LIBFPTR_FNS_ACCESS_ARCHIVE = 15; 

const int LIBFPTR_RT_CLOSED = 0; 

const int LIBFPTR_RT_SELL = 1; 

const int LIBFPTR_RT_SELL_RETURN = 2; 

const int LIBFPTR_RT_SELL_CORRECTION = 7; 

const int LIBFPTR_RT_SELL_RETURN_CORRECTION = 8; 

const int LIBFPTR_RT_BUY = 4; 

const int LIBFPTR_RT_BUY_RETURN = 5; 

const int LIBFPTR_RT_BUY_CORRECTION = 9; 

const int LIBFPTR_RT_BUY_RETURN_CORRECTION = 10; 

const int LIBFPTR_FFD_UNKNOWN = 0; 

const int LIBFPTR_FFD_1_0 = 100; 

const int LIBFPTR_FFD_1_0_5 = 105; 

const int LIBFPTR_FFD_1_1 = 110; 

const int LIBFPTR_FFD_1_2 = 120; 

const int LIBFPTR_TT_DEFAULT = 0; 

const int LIBFPTR_TT_OSN = 1; 

const int LIBFPTR_TT_USN_INCOME = 2; 

const int LIBFPTR_TT_USN_INCOME_OUTCOME = 4; 

const int LIBFPTR_TT_ENVD = 8; 

const int LIBFPTR_TT_ESN = 16; 

const int LIBFPTR_TT_PATENT = 32; 

const int LIBFPTR_AT_NONE = 0; 

const int LIBFPTR_AT_BANK_PAYING_AGENT = 1; 

const int LIBFPTR_AT_BANK_PAYING_SUBAGENT = 2; 

const int LIBFPTR_AT_PAYING_AGENT = 4; 

const int LIBFPTR_AT_PAYING_SUBAGENT = 8; 

const int LIBFPTR_AT_ATTORNEY = 16; 

const int LIBFPTR_AT_COMMISSION_AGENT = 32; 

const int LIBFPTR_AT_ANOTHER = 64; 

const int LIBFPTR_DT_CLOSED = 0; 

const int LIBFPTR_DT_RECEIPT_SELL = 1; 

const int LIBFPTR_DT_RECEIPT_SELL_RETURN = 2; 

const int LIBFPTR_DT_RECEIPT_BUY = 3; 

const int LIBFPTR_DT_RECEIPT_BUY_RETURN = 4; 

const int LIBFPTR_DT_OPEN_SHIFT = 5; 

const int LIBFPTR_DT_CLOSE_SHIFT = 6; 

const int LIBFPTR_DT_REGISTRATION = 7; 

const int LIBFPTR_DT_CLOSE_ARCHIVE = 8; 

const int LIBFPTR_DT_OFD_EXCHANGE_STATUS = 11; 

const int LIBFPTR_DT_RECEIPT_SELL_CORRECTION = 12; 

const int LIBFPTR_DT_RECEIPT_SELL_RETURN_CORRECTION = 13; 

const int LIBFPTR_DT_RECEIPT_BUY_CORRECTION = 14; 

const int LIBFPTR_DT_RECEIPT_BUY_RETURN_CORRECTION = 15; 

const int LIBFPTR_DT_DOCUMENT_SERVICE = 20; 

const int LIBFPTR_DT_DOCUMENT_COPY = 21; 

const int LIBFPTR_NT_FURS = 0; 

const int LIBFPTR_NT_MEDICINES = 1; 

const int LIBFPTR_NT_TOBACCO = 2; 

const int LIBFPTR_NT_SHOES = 3; 

const int LIBFPTR_FN_DOC_REGISTRATION = 1; 

const int LIBFPTR_FN_DOC_OPEN_SHIFT = 2; 

const int LIBFPTR_FN_DOC_RECEIPT = 3; 

const int LIBFPTR_FN_DOC_BSO = 4; 

const int LIBFPTR_FN_DOC_CLOSE_SHIFT = 5; 

const int LIBFPTR_FN_DOC_CLOSE_FN = 6; 

const int LIBFPTR_FN_DOC_OPERATOR_CONFIRMATION = 7; 

const int LIBFPTR_FN_DOC_REREGISTRATION = 11; 

const int LIBFPTR_FN_DOC_EXCHANGE_STATUS = 21; 

const int LIBFPTR_FN_DOC_CORRECTION = 31; 

const int LIBFPTR_FN_DOC_BSO_CORRECTION = 41; 

const int LIBFPTR_UMO_GET_SIZE = 0; 

const int LIBFPTR_UMO_READ_DATA = 1; 

const int LIBFPTR_UMO_WRITE_DATA = 2; 

const int LIBFPTR_UMO_READ_STRING = 3; 

const int LIBFPTR_UMO_WRITE_STRING = 4; 

const int LIBFPTR_UMO_COMMIT = 5; 

const int LIBFPTR_GUI_PARENT_NATIVE = 0; 

const int LIBFPTR_GUI_PARENT_QT = 1; 

const int LIBFPTR_DEFER_NONE = 0; 

const int LIBFPTR_DEFER_PRE = 1; 

const int LIBFPTR_DEFER_POST = 2; 

const int LIBFPTR_DEFER_OVERLAY = 3; 

const int LIBFPTR_TAG_TYPE_STLV = 0; 

const int LIBFPTR_TAG_TYPE_STRING = 1; 

const int LIBFPTR_TAG_TYPE_ARRAY = 2; 

const int LIBFPTR_TAG_TYPE_FVLN = 3; 

const int LIBFPTR_TAG_TYPE_BITS = 4; 

const int LIBFPTR_TAG_TYPE_BYTE = 5; 

const int LIBFPTR_TAG_TYPE_VLN = 6; 

const int LIBFPTR_TAG_TYPE_UINT_16 = 7; 

const int LIBFPTR_TAG_TYPE_UINT_32 = 8; 

const int LIBFPTR_TAG_TYPE_UNIX_TIME = 9; 

const int LIBFPTR_TAG_TYPE_BOOL = 10; 

const int LIBFPTR_FT_BYTE_ARRAY = 0; 

const int LIBFPTR_FT_BIN = 1; 

const int LIBFPTR_FT_BCD = 2; 

const int LIBFPTR_FT_STRING = 3; 

const int LIBFPTR_FT_STRING_NULL_TERM = 4; 

const int LIBFPTR_ST_NUMBER = 0; 

const int LIBFPTR_ST_STRING = 1; 

const int LIBFPTR_ST_BOOL = 2; 

const int LIBFPTR_FWT_FIRMWARE = 0; 

const int LIBFPTR_FWT_SCRIPTS = 2; 

const int LIBFPTR_SCRIPT_EXECUTABLE = 0; 

const int LIBFPTR_SCRIPT_JSON = 1; 

const int LIBFPTR_SCRIPT_SETTINGS = 2; 

const int LIBFPTR_SCRIPT_LIBRARY = 3; 

const int LIBFPTR_UCL_UNUSED = 0; 

const int LIBFPTR_UCL_RECEIPT_TYPE = 1; 

const int LIBFPTR_UCL_TAXATION_TYPE = 2; 

const int LIBFPTR_UCL_TAX_TYPE = 3; 

const int LIBFPTR_UCL_PRODUCT_TYPE = 4; 

const int LIBFPTR_UCL_PAYMENT_METHOD = 5; 

const int LIBFPTR_UCL_USER_3 = 6; 

const int LIBFPTR_UCL_USER_4 = 7; 

const int LIBFPTR_UCL_USER_5 = 8; 

const int LIBFPTR_UCL_USER_6 = 9; 

const int LIBFPTR_UCF_CALC_SUMS = 1; 

const int LIBFPTR_UCF_CALC_QUANTITIES = 2; 

const int LIBFPTR_UCF_CALC_SUMS_OTHERS = 4; 

const int LIBFPTR_UCF_CALC_QUANTITIES_OTHERS = 8; 

const unsigned int LIBFPTR_UC_OTHERS = 4294967295; 

const int LIBFPTR_FNCT_SHIFT = 0; 

const int LIBFPTR_FNCT_NON_NULLABLE = 1; 

const int LIBFPTR_MCT_OTHER = 0; 

const int LIBFPTR_MCT_EGAIS_20 = 1; 

const int LIBFPTR_MCT_EGAIS_30 = 2; 

const int LIBFPTR_MCT12_AUTO = 256; 

const int LIBFPTR_MCT12_UNKNOWN = 0; 

const int LIBFPTR_MCT12_SHORT = 1; 

const int LIBFPTR_MCT12_88_CHECK = 2; 

const int LIBFPTR_MCT12_44_NO_CHECK = 3; 

const int LIBFPTR_MCT12_44_CHECK = 4; 

const int LIBFPTR_MCT12_4_NO_CHECK = 5; 

const int LIBFPTR_MES_UNCHANGED = 255; 

const int LIBFPTR_MES_PIECE_SOLD = 1; 

const int LIBFPTR_MES_DRY_FOR_SALE = 2; 

const int LIBFPTR_MES_PIECE_RETURN = 3; 

const int LIBFPTR_MES_DRY_RETURN = 4; 

const int LIBFPTR_IU_PIECE = 0; 

const int LIBFPTR_IU_GRAM = 10; 

const int LIBFPTR_IU_KILOGRAM = 11; 

const int LIBFPTR_IU_TON = 12; 

const int LIBFPTR_IU_CENTIMETER = 20; 

const int LIBFPTR_IU_DECIMETER = 21; 

const int LIBFPTR_IU_METER = 22; 

const int LIBFPTR_IU_SQUARE_CENTIMETER = 30; 

const int LIBFPTR_IU_SQUARE_DECIMETER = 31; 

const int LIBFPTR_IU_SQUARE_METER = 32; 

const int LIBFPTR_IU_MILLILITER = 40; 

const int LIBFPTR_IU_LITER = 41; 

const int LIBFPTR_IU_CUBIC_METER = 42; 

const int LIBFPTR_IU_KILOWATT_HOUR = 50; 

const int LIBFPTR_IU_GKAL = 51; 

const int LIBFPTR_IU_DAY = 70; 

const int LIBFPTR_IU_HOUR = 71; 

const int LIBFPTR_IU_MINUTE = 72; 

const int LIBFPTR_IU_SECOND = 73; 

const int LIBFPTR_IU_KILOBYTE = 80; 

const int LIBFPTR_IU_MEGABYTE = 81; 

const int LIBFPTR_IU_GIGABYTE = 82; 

const int LIBFPTR_IU_TERABYTE = 83; 

const int LIBFPTR_IU_OTHER = 255; 

const int LIBFPTR_MCS_BLOCK = 0; 

const int LIBFPTR_MCS_NO_MARK_FOR_CHECK = 1; 

const int LIBFPTR_MCS_MARK_RECEIVE_B1 = 2; 

const int LIBFPTR_MCS_MARK_STATE_QUERY_B5 = 3; 

const int LIBFPTR_MCS_MARK_STATE_ANSWER_B6 = 4; 

const int LIBFPTR_NFM_LESS_50_PERCENT = 0; 

const int LIBFPTR_NFM_FROM_50_TO_80_PERCENT = 1; 

const int LIBFPTR_NFM_FROM_80_TO_90_PERCENT = 2; 

const int LIBFPTR_NFM_MORE_90_PERCENT = 3; 

const int LIBFPTR_NFM_OUT_OF_MEMORY = 4; 

const int LIBFPTR_OIS_ESTIMATED_STATUS_CORRECT = 1; 

const int LIBFPTR_OIS_ESTIMATED_STATUS_INCORRECT = 2; 

const int LIBFPTR_OIS_SALE_STOPPED = 3; 

const int LIBFPTR_ORR_CORRECT = 0; 

const int LIBFPTR_ORR_INCORRECT = 1; 

const int LIBFPTR_ORR_UNRECOGNIZED = 2; 

const int LIBFPTR_CER_CHECKED = 0; 

const int LIBFPTR_CER_TYPE_INCORRECT = 1; 

const int LIBFPTR_CER_NO_KEYS = 2; 

const int LIBFPTR_CER_NO_GS1 = 3; 

const int LIBFPTR_CER_OTHER = 4; 

const int LIBFPTR_MCS_NOT_EXECUTED = 0; 

const int LIBFPTR_MCS_EXECUTED = 1; 

const int LIBFPTR_MCS_IS_OVER = 2; 

const int LIBFPTR_MCS_RESULT_IS_RECIEVED = 3; 

const int LIBFPTR_MCT_AUTONOMOUS = 0; 

const int LIBFPTR_MCT_WAIT_FOR_RESULT = 1; 

const int LIBFPTR_MCT_RESULT_NOT_WAIT = 2; 

const int LIBFPTR_MCT_QUERY_NOT_SEND = 3; 

const int LIBFPTR_MCT_QUERY_NOT_FORM = 4; 

const int LIBFPTR_MCST_WAITING_FOR_TASK = 0; 

const int LIBFPTR_MCST_OPENING_CONNECTION = 1; 

const int LIBFPTR_MCST_SENDING = 2; 

const int LIBFPTR_MCST_WAITING_FOR_RESULT = 3; 

const int LIBFPTR_MCST_GETTING_RESULT = 4; 

const int LIBFPTR_MCST_DECODE_RESULT = 5; 

const int LIBFPTR_MCST_TASK_IS_OVER = 6; 

const int LIBFPTR_MCST_WAITING_FOR_REPEAT = 7; 

const int LIBFPTR_SILENT_REBOOT_NO = 0; 

const int LIBFPTR_SILENT_REBOOT_AFTER_SESSION_CLOSE = 1; 

const int LIBFPTR_SILENT_REBOOT_BEFORE_SESSION_OPEN = 2; 

const int LIBFPTR_MERGE_RECEIPT_NO = 0; 

const int LIBFPTR_MERGE_RECEIPT_ALL = 1; 

const int LIBFPTR_MERGE_RECEIPT_MARK_ONLY = 2; 

const int LIBFPTR_ERROR_USERS_SCRIPTS_BASE = 1000; 

const int LIBFPTR_PLATFORM_UNKNOWN = 0; 

const int LIBFPTR_PLATFORM_25 = 25; 

const int LIBFPTR_PLATFORM_50 = 50; 

const int LIBFPTR_RPF_ELECTRONIC_AND_PRINT = 0; 

const int LIBFPTR_RPF_ONLY_ELECTRONIC = 1; 

const int LIBFPTR_RPF_ONLY_PRINT = 2; 

const int LIBFPTR_PET_STRINGS = 0; 

const int LIBFPTR_PET_PICTURES = 1; 

const int LIBFPTR_PET_FISCAL_DOCUMENT = 2; 

const int LIBFPTR_LIC_BASE_FISCAL = 0; 

const int LIBFPTR_LIC_WRITE_FW = 1; 

const int LIBFPTR_LIC_TAX_20 = 2; 

const int LIBFPTR_LIC_FFD_1_1 = 3; 

const int LIBFPTR_LIC_MARK_CODE = 4; 

const int LIBFPTR_LIC_EXT_FUNC = 5; 

const int LIBFPTR_LIC_TEMPLATE = 6; 

const int LIBFPTR_LIC_PRINT_BMP = 7; 

const int LIBFPTR_LIC_DISABLE_PF = 8; 

const int LIBFPTR_LIC_FFD_1_2 = 9; 

const int LIBFPTR_LIC_FR_WORK = 10; 

const int LIBFPTR_LIC_WEB = 11; 

const int LIBFPTR_LIC_FFD_1_1_2 = 12; 

const int LIBFPTR_LIC_TEST_LAB = 13; 

const int LIBFPTR_LIC_WEB_REQ = 14; 

const int LIBFPTR_LIC_RELESE = 15; 

const int LIBFPTR_LIC_EXT_PRINT = 16; 

const int LIBFPTR_LIC_OSU = 17; 

const int LIBFPTR_LIC_EXT_FISCAL = 18; 

const int LIBFPTR_ERROR_USERS_SCRIPTS_END = 1999; 

const int LIBFPTR_ERROR_BASE_RPC = 600; 

const int LIBFPTR_ERROR_RCP_SERVER_BUSY = 601; 

const int LIBFPTR_ERROR_RCP_SERVER_VERSION = 602; 

const int LIBFPTR_ERROR_RCP_SERVER_EXCHANGE = 603; 

const int LIBFPTR_ERROR_RPC_END = 699; 



inline std::string str(const std::wstring &src)
{
    if (src.empty())
        return "";

    std::vector<char> dest;

    try
    {
        for (size_t i = 0; i < src.length(); ++i)
            utf8::append((uint32_t) src[i], std::back_inserter(dest));
    }
    catch (...)
    {
    }

    if (dest.empty())
        return "";
    return std::string(&dest[0], dest.size());
}

inline std::wstring wstr(const std::string &src)
{
    std::wstring dest;
    size_t i = 0;

    if ((src.length() > 3) &&
        (src[0] == (char) 0xEF) && (src[1] == (char) 0xBB) && (src[2] == (char) 0xBF))
        i = 3;

    std::vector<char> srcV(src.length() - i);
    memcpy(&srcV[0], src.c_str() + i, srcV.size());
    std::vector<char>::iterator current = srcV.begin();
    try
    {
        while (current != srcV.end())
            dest.push_back(utf8::next(current, srcV.end()));
    }
    catch (...)
    {
    }

    return dest;
}

inline std::wstring defaultLibraryPath()
{
    std::wstring result;
#ifdef DTOX_OS_WINDOWS_FAMILY
    HKEY hKey = 0;
    LONG lRes = RegOpenKeyExW(HKEY_LOCAL_MACHINE,
                             L"SOFTWARE\\ATOL\\Drivers\\10.0\\KKT",
                             0,
                             KEY_READ,
                             &hKey);
    if (lRes == ERROR_SUCCESS)
    {
        WCHAR szBuffer[1024] = {0};
        DWORD dwBufferSize = sizeof(szBuffer);
        ULONG nError = RegQueryValueExW(hKey,
                                       L"INSTALL_DIR",
                                       0,
                                       NULL,
                                       (LPBYTE) szBuffer,
                                       &dwBufferSize);
        if (ERROR_SUCCESS == nError)
        {
            result = szBuffer;
            result += L"\\bin";
        }
    }
    RegCloseKey(hKey);
#else

#endif
    return result;
}

inline std::wstring currentExecutablePath()
{
    std::wstring result;
#ifdef DTOX_OS_WINDOWS_FAMILY
    WCHAR exePath[MAX_PATH] = {0};
    GetModuleFileNameW(0, exePath, MAX_PATH - 1);
    result = &exePath[0];

    size_t pos = result.rfind(L'\\');
    result = result.substr(0, pos);
#elif defined(DTOX_OS_APPLE_FAMILY)
    std::vector<char> exePath(256);
    uint32_t size = exePath.size() - 1;
    if (_NSGetExecutablePath(&exePath[0], &size) != 0)
    {
        exePath.resize(size + 1);
        _NSGetExecutablePath(&exePath[0], &size);
    }

    result = wstr(&exePath[0]);
    size_t pos = result.rfind(L'/');
    result = result.substr(0, pos);
#else
    char exePath[4096] = {0};
    if (readlink("/proc/self/exe", &exePath[0], sizeof(exePath) - 1) > 0)
        result = wstr(&exePath[0]);

    size_t pos = result.rfind(L'/');
    result = result.substr(0, pos);
#endif

    return result;
}

template<typename T>
bool endWith(const std::basic_string<T> &fullString, const std::basic_string<T> &ending)
{
    if (fullString.length() >= ending.length())
    {
        return (0 == fullString.compare(fullString.length() - ending.length(), ending.length(), ending));
    }
    else
    {
        return false;
    }
}


class fptr_id_t
{
public:
    explicit fptr_id_t(const std::wstring &s) : m_s(s)
    {}

    std::wstring getValue() const
    {
        return m_s;
    }

private:
    std::wstring m_s;
};

class FPTR_CLASS_NAME
{
private:
    void doLoadLibrary(const std::wstring &path)
    {
#ifdef DTOX_OS_LINUX_FAMILY
        std::wstring p = path;
        if (!endWith<wchar_t>(p, L"libfptr10.so"))
            p += (!p.empty() ? std::wstring(PATH_SEPARATOR_W) : L"") + L"libfptr10.so";

        m_library = LOAD_LIBRARY(str(p).c_str());
        if (!m_library)
            throw std::runtime_error("libfptr10.so not found");
#elif defined(DTOX_OS_MAC)
        std::wstring p = path;
        if (!endWith<wchar_t>(p, L"fptr10.framework/fptr10"))
            p += (!p.empty() ? std::wstring(PATH_SEPARATOR_W) : L"") + L"fptr10.framework/fptr10";

        m_library = LOAD_LIBRARY(str(p).c_str());
        if (!m_library)
        {
            p = path;
            if (!endWith<wchar_t>(p, L"libfptr10.dylib"))
                p += (!p.empty() ? std::wstring(PATH_SEPARATOR_W) : L"") + L"libfptr10.dylib";
            m_library = LOAD_LIBRARY(str(path).c_str());
            if (!m_library)
                throw std::runtime_error(std::string("fptr10 not found (") + dlerror() + ")");
        }
#else
        std::wstring p = path;
        if (endWith<wchar_t>(p, L"fptr10.dll"))
            p = p.substr(0, p.length() - strlen("fptr10.dll"));
        if (!p.empty())
            p += PATH_SEPARATOR_W;

        m_library = LOAD_LIBRARY(p.c_str());
        if (!m_library)
        {
            if (!LOAD_LIBRARY((p + L"msvcp140.dll").c_str()))
                throw std::runtime_error("msvcp140.dll not found");

            m_library = LOAD_LIBRARY((p + L"fptr10.dll").c_str());
            if (!m_library)
                throw std::runtime_error("fptr10.dll not found");
        }
#endif
    }

    void loadLibrary(const std::wstring &path)
    {
        std::wstring loadPath = path;
        if (loadPath.empty())
        {
            try
            {
                doLoadLibrary(currentExecutablePath() + PATH_SEPARATOR_WC);
            }
            catch (const std::runtime_error &)
            {
            }
            loadPath = defaultLibraryPath();
            if (!loadPath.empty())
                loadPath += PATH_SEPARATOR_WC;
        }

        doLoadLibrary(loadPath);
    }

public:
    explicit FPTR_CLASS_NAME(const std::wstring &libraryPath = L"")
        : m_library(0)
          , m_fptr(0)
    {
        loadLibrary(libraryPath);

        loadMethods();

        int r = m_createMethod(&m_fptr);
        if (r == -2)
            throw std::runtime_error("Invalid [id] format");
        else if (r != 0)
            throw std::runtime_error("Can`t create driver handle");
    }

    FPTR_CLASS_NAME(const fptr_id_t &id, const std::wstring &libraryPath = L"")
        : m_library(0)
          , m_fptr(0)
    {
        doLoadLibrary(libraryPath);

        loadMethods();

        int r = m_createWithIDMethod(&m_fptr, id.getValue().c_str());
        if (r == -2)
            throw std::runtime_error("Invalid [id] format");
        else if (r != 0)
            throw std::runtime_error("Can`t create driver handle");
    }

    virtual ~FPTR_CLASS_NAME()
    {
        if (m_fptr)
            m_destroyMethod(&m_fptr);
    }

    virtual void* getHandle()
    {
        return m_fptr;
    }

    virtual std::string version()
    {
        return m_getVersionMethod();
    }

    virtual std::string wrapperVersion()
    {
        return "10.10.6.0";
    }

    virtual int logWrite(const std::wstring &tag, int level, const std::wstring &message)
    {
        return m_writeLogMethod(m_fptr, tag.c_str(), level, message.c_str());
    }

    virtual int changeLabel(const std::wstring &label)
    {
        return m_changeLabelMethod(m_fptr, label.c_str());
    }

    virtual bool isOpened()
    {
        return m_isOpenedMethod(m_fptr) != 0;
    }

    virtual int showProperties(int parantType, void *parent)
    {
        return m_showPropertiesMethod(m_fptr, parantType, parent);
    }

    virtual int errorCode()
    {
        return m_errorCodeMethod(m_fptr);
    }

    virtual std::wstring errorDescription()
    {
        std::vector<wchar_t> description(128);
        int size = m_errorDescriptionMethod(m_fptr, &description[0], description.size());
        if (size > description.size())
        {
            description.resize(size, 0x00);
            m_errorDescriptionMethod(m_fptr, &description[0], description.size());
        }

        return &description[0];
    }

    virtual std::wstring errorRecommendation()
    {
        std::vector<wchar_t> recommendation(128);
        int size = m_errorRecommendationMethod(m_fptr, &recommendation[0], recommendation.size());
        if (size > recommendation.size())
        {
            recommendation.resize(size, 0x00);
            m_errorRecommendationMethod(m_fptr, &recommendation[0], recommendation.size());
        }

        return &recommendation[0];
    }

    virtual void resetError()
    {
        return m_resetErrorMethod(m_fptr);
    }

    virtual int setSettings(const std::wstring &settings)
    {
        return m_setSettingsMethod(m_fptr, settings.c_str());
    }

    virtual std::wstring getSettings()
    {
        std::vector<wchar_t> settings(128);
        int size = m_getSettingsMethod(m_fptr, &settings[0], settings.size());
        if (size > settings.size())
        {
            settings.resize(size, 0x00);
            m_getSettingsMethod(m_fptr, &settings[0], settings.size());
        }

        return &settings[0];
    }

    virtual void setSingleSetting(const std::wstring &key, const std::wstring &value)
    {
        return m_setSingleSettingMethod(m_fptr, key.c_str(), value.c_str());
    }

    virtual std::wstring getSingleSetting(const std::wstring &key)
    {
        std::vector<wchar_t> setting(16);
        int size = m_getSingleSettingMethod(m_fptr, key.c_str(), &setting[0], setting.size());
        if (size > setting.size())
        {
            setting.resize(size, 0x00);
            m_getSingleSettingMethod(m_fptr, key.c_str(), &setting[0], setting.size());
        }

        return &setting[0];
    }

    virtual void setParam(int param, int value)
    {
        m_setParamIntMethod(m_fptr, param, value);
    }

    virtual void setParam(int param, unsigned int value)
    {
        m_setParamIntMethod(m_fptr, param, value);
    }

    virtual void setParam(int param, bool value)
    {
        m_setParamBoolMethod(m_fptr, param, value ? 1 : 0);
    }

    virtual void setParam(int param, double value)
    {
        m_setParamDoubleMethod(m_fptr, param, value);
    }

    virtual void setParam(int param, const std::wstring &value)
    {
        m_setParamStringMethod(m_fptr, param, value.c_str());
    }

    virtual void setParam(int param, const wchar_t *value)
    {
        m_setParamStringMethod(m_fptr, param, value);
    }

    virtual void setParam(int param, const std::vector<unsigned char> &value)
    {
        m_setParamByteArrayMethod(m_fptr, param, value.data(), value.size());
    }

#if __cplusplus >= 201103L
    virtual void setParam(int param, const std::initializer_list<unsigned char> &value)
    {
        const std::vector<unsigned char> v = value;
        m_setParamByteArrayMethod(m_fptr, param, v.data(), v.size());
    }
#endif

    virtual void setParam(int param, unsigned char *value, int size)
    {
        m_setParamByteArrayMethod(m_fptr, param, value, size);
    }

    virtual void setParam(int param, const std::tm &value)
    {
        m_setParamDateTimeMethod(m_fptr, param,
                                 value.tm_year + 1900, value.tm_mon + 1, value.tm_mday,
                                 value.tm_hour, value.tm_min, value.tm_sec);
    }

    virtual void setNonPrintableParam(int param, int value)
    {
        m_setNonPrintableParamIntMethod(m_fptr, param, value);
    }

    virtual void setNonPrintableParam(int param, unsigned int value)
    {
        m_setNonPrintableParamIntMethod(m_fptr, param, value);
    }

    virtual void setNonPrintableParam(int param, bool value)
    {
        m_setNonPrintableParamBoolMethod(m_fptr, param, value ? 1 : 0);
    }

    virtual void setNonPrintableParam(int param, double value)
    {
        m_setNonPrintableParamDoubleMethod(m_fptr, param, value);
    }

    virtual void setNonPrintableParam(int param, const std::wstring &value)
    {
        m_setNonPrintableParamStringMethod(m_fptr, param, value.c_str());
    }
    
    virtual void setNonPrintableParam(int param, const wchar_t *value)
    {
        m_setNonPrintableParamStringMethod(m_fptr, param, value);
    }
    
    virtual void setNonPrintableParam(int param, const std::vector<unsigned char> &value)
    {
        m_setNonPrintableParamByteArrayMethod(m_fptr, param, value.data(), value.size());
    }
    
#if __cplusplus >= 201103L
    virtual void setNonPrintableParam(int param, const std::initializer_list<unsigned char> &value)
    {
        const std::vector<unsigned char> v = value;
        m_setNonPrintableParamByteArrayMethod(m_fptr, param, v.data(), v.size());
    }
#endif
    
    virtual void setNonPrintableParam(int param, const unsigned char *value, int size)
    {
        m_setNonPrintableParamByteArrayMethod(m_fptr, param, value, size);
    }

    virtual void setNonPrintableParam(int param, const std::tm &value)
    {
        m_setNonPrintableParamDateTimeMethod(m_fptr, param,
                                             value.tm_year + 1900, value.tm_mon + 1, value.tm_mday,
                                             value.tm_hour, value.tm_min, value.tm_sec);
    }

    virtual void setUserParam(int param, int value)
    {
        m_setUserParamIntMethod(m_fptr, param, value);
    }

    virtual void setUserParam(int param, unsigned int value)
    {
        m_setUserParamIntMethod(m_fptr, param, value);
    }

    virtual void setUserParam(int param, bool value)
    {
        m_setUserParamBoolMethod(m_fptr, param, value ? 1 : 0);
    }

    virtual void setUserParam(int param, double value)
    {
        m_setUserParamDoubleMethod(m_fptr, param, value);
    }

    virtual void setUserParam(int param, const std::wstring &value)
    {
        m_setUserParamStringMethod(m_fptr, param, value.c_str());
    }

    virtual void setUserParam(int param, unsigned char *value, int size)
    {
        m_setUserParamByteArrayMethod(m_fptr, param, value, size);
    }

    virtual void setUserParam(int param, const std::tm &value)
    {
        m_setUserParamDateTimeMethod(m_fptr, param,
                                     value.tm_year + 1900, value.tm_mon + 1, value.tm_mday,
                                     value.tm_hour, value.tm_min, value.tm_sec);
    }

    virtual unsigned int getParamInt(int param)
    {
        return m_getParamIntMethod(m_fptr, param);
    }

    virtual bool getParamBool(int param)
    {
        return m_getParamBoolMethod(m_fptr, param) != 0;
    }

    virtual double getParamDouble(int param)
    {
        return m_getParamDoubleMethod(m_fptr, param);
    }

    virtual std::wstring getParamString(int param)
    {
        std::vector<wchar_t> value(256);
        int size = m_getParamStringMethod(m_fptr, param, &value[0], value.size());
        if (size > value.size())
        {
            value.resize(size, 0x00);
            m_getParamStringMethod(m_fptr, param, &value[0], value.size());
        }

        return &value[0];
    }

    virtual std::vector<unsigned char> getParamByteArray(int param)
    {
        std::vector<unsigned char> value(256);
        int size = m_getParamByteArrayMethod(m_fptr, param, &value[0], value.size());
        if (size > value.size())
        {
            value.resize(size);
            size = m_getParamByteArrayMethod(m_fptr, param, &value[0], value.size());
        }
        value.resize(size);

        return value;
    }

    virtual int getParamByteArray(int param, unsigned char *value, int size)
    {
        return m_getParamByteArrayMethod(m_fptr, param, value, size);
    }

    virtual std::tm getParamDateTime(int param)
    {
        std::tm t = {};
        m_getParamDateTimeMethod(m_fptr, param,
                                 &t.tm_year,
                                 &t.tm_mon,
                                 &t.tm_mday,
                                 &t.tm_hour,
                                 &t.tm_min,
                                 &t.tm_sec);
        t.tm_year -= 1900;
        t.tm_mon -= 1;
        return t;
    }

    virtual bool isParamAvailable(int param)
    {
        return m_isParamAvailableMethod(m_fptr, param) > 0;
    }


    
    virtual int applySingleSettings()
    {
        if (!m_applySingleSettingsMethod)
            throw std::logic_error("method libfptr_apply_single_settings() not found");
    
        return m_applySingleSettingsMethod(m_fptr);
    }

    
    virtual int open()
    {
        if (!m_openMethod)
            throw std::logic_error("method libfptr_open() not found");
    
        return m_openMethod(m_fptr);
    }

    
    virtual int close()
    {
        if (!m_closeMethod)
            throw std::logic_error("method libfptr_close() not found");
    
        return m_closeMethod(m_fptr);
    }

    
    virtual int resetParams()
    {
        if (!m_resetParamsMethod)
            throw std::logic_error("method libfptr_reset_params() not found");
    
        return m_resetParamsMethod(m_fptr);
    }

    
    virtual int runCommand()
    {
        if (!m_runCommandMethod)
            throw std::logic_error("method libfptr_run_command() not found");
    
        return m_runCommandMethod(m_fptr);
    }

    
    virtual int beep()
    {
        if (!m_beepMethod)
            throw std::logic_error("method libfptr_beep() not found");
    
        return m_beepMethod(m_fptr);
    }

    
    virtual int openDrawer()
    {
        if (!m_openDrawerMethod)
            throw std::logic_error("method libfptr_open_drawer() not found");
    
        return m_openDrawerMethod(m_fptr);
    }

    
    virtual int cut()
    {
        if (!m_cutMethod)
            throw std::logic_error("method libfptr_cut() not found");
    
        return m_cutMethod(m_fptr);
    }

    
    virtual int devicePoweroff()
    {
        if (!m_devicePoweroffMethod)
            throw std::logic_error("method libfptr_device_poweroff() not found");
    
        return m_devicePoweroffMethod(m_fptr);
    }

    
    virtual int deviceReboot()
    {
        if (!m_deviceRebootMethod)
            throw std::logic_error("method libfptr_device_reboot() not found");
    
        return m_deviceRebootMethod(m_fptr);
    }

    
    virtual int openShift()
    {
        if (!m_openShiftMethod)
            throw std::logic_error("method libfptr_open_shift() not found");
    
        return m_openShiftMethod(m_fptr);
    }

    
    virtual int resetSummary()
    {
        if (!m_resetSummaryMethod)
            throw std::logic_error("method libfptr_reset_summary() not found");
    
        return m_resetSummaryMethod(m_fptr);
    }

    
    virtual int initDevice()
    {
        if (!m_initDeviceMethod)
            throw std::logic_error("method libfptr_init_device() not found");
    
        return m_initDeviceMethod(m_fptr);
    }

    
    virtual int queryData()
    {
        if (!m_queryDataMethod)
            throw std::logic_error("method libfptr_query_data() not found");
    
        return m_queryDataMethod(m_fptr);
    }

    
    virtual int cashIncome()
    {
        if (!m_cashIncomeMethod)
            throw std::logic_error("method libfptr_cash_income() not found");
    
        return m_cashIncomeMethod(m_fptr);
    }

    
    virtual int cashOutcome()
    {
        if (!m_cashOutcomeMethod)
            throw std::logic_error("method libfptr_cash_outcome() not found");
    
        return m_cashOutcomeMethod(m_fptr);
    }

    
    virtual int openReceipt()
    {
        if (!m_openReceiptMethod)
            throw std::logic_error("method libfptr_open_receipt() not found");
    
        return m_openReceiptMethod(m_fptr);
    }

    
    virtual int cancelReceipt()
    {
        if (!m_cancelReceiptMethod)
            throw std::logic_error("method libfptr_cancel_receipt() not found");
    
        return m_cancelReceiptMethod(m_fptr);
    }

    
    virtual int closeReceipt()
    {
        if (!m_closeReceiptMethod)
            throw std::logic_error("method libfptr_close_receipt() not found");
    
        return m_closeReceiptMethod(m_fptr);
    }

    
    virtual int checkDocumentClosed()
    {
        if (!m_checkDocumentClosedMethod)
            throw std::logic_error("method libfptr_check_document_closed() not found");
    
        return m_checkDocumentClosedMethod(m_fptr);
    }

    
    virtual int receiptTotal()
    {
        if (!m_receiptTotalMethod)
            throw std::logic_error("method libfptr_receipt_total() not found");
    
        return m_receiptTotalMethod(m_fptr);
    }

    
    virtual int receiptTax()
    {
        if (!m_receiptTaxMethod)
            throw std::logic_error("method libfptr_receipt_tax() not found");
    
        return m_receiptTaxMethod(m_fptr);
    }

    
    virtual int registration()
    {
        if (!m_registrationMethod)
            throw std::logic_error("method libfptr_registration() not found");
    
        return m_registrationMethod(m_fptr);
    }

    
    virtual int payment()
    {
        if (!m_paymentMethod)
            throw std::logic_error("method libfptr_payment() not found");
    
        return m_paymentMethod(m_fptr);
    }

    
    virtual int report()
    {
        if (!m_reportMethod)
            throw std::logic_error("method libfptr_report() not found");
    
        return m_reportMethod(m_fptr);
    }

    
    virtual int printText()
    {
        if (!m_printTextMethod)
            throw std::logic_error("method libfptr_print_text() not found");
    
        return m_printTextMethod(m_fptr);
    }

    
    virtual int printCliche()
    {
        if (!m_printClicheMethod)
            throw std::logic_error("method libfptr_print_cliche() not found");
    
        return m_printClicheMethod(m_fptr);
    }

    
    virtual int beginNonfiscalDocument()
    {
        if (!m_beginNonfiscalDocumentMethod)
            throw std::logic_error("method libfptr_begin_nonfiscal_document() not found");
    
        return m_beginNonfiscalDocumentMethod(m_fptr);
    }

    
    virtual int endNonfiscalDocument()
    {
        if (!m_endNonfiscalDocumentMethod)
            throw std::logic_error("method libfptr_end_nonfiscal_document() not found");
    
        return m_endNonfiscalDocumentMethod(m_fptr);
    }

    
    virtual int printBarcode()
    {
        if (!m_printBarcodeMethod)
            throw std::logic_error("method libfptr_print_barcode() not found");
    
        return m_printBarcodeMethod(m_fptr);
    }

    
    virtual int printPicture()
    {
        if (!m_printPictureMethod)
            throw std::logic_error("method libfptr_print_picture() not found");
    
        return m_printPictureMethod(m_fptr);
    }

    
    virtual int printPictureByNumber()
    {
        if (!m_printPictureByNumberMethod)
            throw std::logic_error("method libfptr_print_picture_by_number() not found");
    
        return m_printPictureByNumberMethod(m_fptr);
    }

    
    virtual int uploadPictureFromFile()
    {
        if (!m_uploadPictureFromFileMethod)
            throw std::logic_error("method libfptr_upload_picture_from_file() not found");
    
        return m_uploadPictureFromFileMethod(m_fptr);
    }

    
    virtual int clearPictures()
    {
        if (!m_clearPicturesMethod)
            throw std::logic_error("method libfptr_clear_pictures() not found");
    
        return m_clearPicturesMethod(m_fptr);
    }

    
    virtual int writeDeviceSettingRaw()
    {
        if (!m_writeDeviceSettingRawMethod)
            throw std::logic_error("method libfptr_write_device_setting_raw() not found");
    
        return m_writeDeviceSettingRawMethod(m_fptr);
    }

    
    virtual int readDeviceSettingRaw()
    {
        if (!m_readDeviceSettingRawMethod)
            throw std::logic_error("method libfptr_read_device_setting_raw() not found");
    
        return m_readDeviceSettingRawMethod(m_fptr);
    }

    
    virtual int commitSettings()
    {
        if (!m_commitSettingsMethod)
            throw std::logic_error("method libfptr_commit_settings() not found");
    
        return m_commitSettingsMethod(m_fptr);
    }

    
    virtual int initSettings()
    {
        if (!m_initSettingsMethod)
            throw std::logic_error("method libfptr_init_settings() not found");
    
        return m_initSettingsMethod(m_fptr);
    }

    
    virtual int resetSettings()
    {
        if (!m_resetSettingsMethod)
            throw std::logic_error("method libfptr_reset_settings() not found");
    
        return m_resetSettingsMethod(m_fptr);
    }

    
    virtual int writeDateTime()
    {
        if (!m_writeDateTimeMethod)
            throw std::logic_error("method libfptr_write_date_time() not found");
    
        return m_writeDateTimeMethod(m_fptr);
    }

    
    virtual int writeLicense()
    {
        if (!m_writeLicenseMethod)
            throw std::logic_error("method libfptr_write_license() not found");
    
        return m_writeLicenseMethod(m_fptr);
    }

    
    virtual int fnOperation()
    {
        if (!m_fnOperationMethod)
            throw std::logic_error("method libfptr_fn_operation() not found");
    
        return m_fnOperationMethod(m_fptr);
    }

    
    virtual int fnQueryData()
    {
        if (!m_fnQueryDataMethod)
            throw std::logic_error("method libfptr_fn_query_data() not found");
    
        return m_fnQueryDataMethod(m_fptr);
    }

    
    virtual int fnWriteAttributes()
    {
        if (!m_fnWriteAttributesMethod)
            throw std::logic_error("method libfptr_fn_write_attributes() not found");
    
        return m_fnWriteAttributesMethod(m_fptr);
    }

    
    virtual int externalDevicePowerOn()
    {
        if (!m_externalDevicePowerOnMethod)
            throw std::logic_error("method libfptr_external_device_power_on() not found");
    
        return m_externalDevicePowerOnMethod(m_fptr);
    }

    
    virtual int externalDevicePowerOff()
    {
        if (!m_externalDevicePowerOffMethod)
            throw std::logic_error("method libfptr_external_device_power_off() not found");
    
        return m_externalDevicePowerOffMethod(m_fptr);
    }

    
    virtual int externalDeviceWriteData()
    {
        if (!m_externalDeviceWriteDataMethod)
            throw std::logic_error("method libfptr_external_device_write_data() not found");
    
        return m_externalDeviceWriteDataMethod(m_fptr);
    }

    
    virtual int externalDeviceReadData()
    {
        if (!m_externalDeviceReadDataMethod)
            throw std::logic_error("method libfptr_external_device_read_data() not found");
    
        return m_externalDeviceReadDataMethod(m_fptr);
    }

    
    virtual int operatorLogin()
    {
        if (!m_operatorLoginMethod)
            throw std::logic_error("method libfptr_operator_login() not found");
    
        return m_operatorLoginMethod(m_fptr);
    }

    
    virtual int processJson()
    {
        if (!m_processJsonMethod)
            throw std::logic_error("method libfptr_process_json() not found");
    
        return m_processJsonMethod(m_fptr);
    }

    
    virtual int readDeviceSetting()
    {
        if (!m_readDeviceSettingMethod)
            throw std::logic_error("method libfptr_read_device_setting() not found");
    
        return m_readDeviceSettingMethod(m_fptr);
    }

    
    virtual int writeDeviceSetting()
    {
        if (!m_writeDeviceSettingMethod)
            throw std::logic_error("method libfptr_write_device_setting() not found");
    
        return m_writeDeviceSettingMethod(m_fptr);
    }

    
    virtual int beginReadRecords()
    {
        if (!m_beginReadRecordsMethod)
            throw std::logic_error("method libfptr_begin_read_records() not found");
    
        return m_beginReadRecordsMethod(m_fptr);
    }

    
    virtual int readNextRecord()
    {
        if (!m_readNextRecordMethod)
            throw std::logic_error("method libfptr_read_next_record() not found");
    
        return m_readNextRecordMethod(m_fptr);
    }

    
    virtual int endReadRecords()
    {
        if (!m_endReadRecordsMethod)
            throw std::logic_error("method libfptr_end_read_records() not found");
    
        return m_endReadRecordsMethod(m_fptr);
    }

    
    virtual int userMemoryOperation()
    {
        if (!m_userMemoryOperationMethod)
            throw std::logic_error("method libfptr_user_memory_operation() not found");
    
        return m_userMemoryOperationMethod(m_fptr);
    }

    
    virtual int continuePrint()
    {
        if (!m_continuePrintMethod)
            throw std::logic_error("method libfptr_continue_print() not found");
    
        return m_continuePrintMethod(m_fptr);
    }

    
    virtual int initMgm()
    {
        if (!m_initMgmMethod)
            throw std::logic_error("method libfptr_init_mgm() not found");
    
        return m_initMgmMethod(m_fptr);
    }

    
    virtual int utilFormTlv()
    {
        if (!m_utilFormTlvMethod)
            throw std::logic_error("method libfptr_util_form_tlv() not found");
    
        return m_utilFormTlvMethod(m_fptr);
    }

    
    virtual int utilFormNomenclature()
    {
        if (!m_utilFormNomenclatureMethod)
            throw std::logic_error("method libfptr_util_form_nomenclature() not found");
    
        return m_utilFormNomenclatureMethod(m_fptr);
    }

    
    virtual int utilMapping()
    {
        if (!m_utilMappingMethod)
            throw std::logic_error("method libfptr_util_mapping() not found");
    
        return m_utilMappingMethod(m_fptr);
    }

    
    virtual int readModelFlags()
    {
        if (!m_readModelFlagsMethod)
            throw std::logic_error("method libfptr_read_model_flags() not found");
    
        return m_readModelFlagsMethod(m_fptr);
    }

    
    virtual int lineFeed()
    {
        if (!m_lineFeedMethod)
            throw std::logic_error("method libfptr_line_feed() not found");
    
        return m_lineFeedMethod(m_fptr);
    }

    
    virtual int flashFirmware()
    {
        if (!m_flashFirmwareMethod)
            throw std::logic_error("method libfptr_flash_firmware() not found");
    
        return m_flashFirmwareMethod(m_fptr);
    }

    
    virtual int softLockInit()
    {
        if (!m_softLockInitMethod)
            throw std::logic_error("method libfptr_soft_lock_init() not found");
    
        return m_softLockInitMethod(m_fptr);
    }

    
    virtual int softLockQuerySessionCode()
    {
        if (!m_softLockQuerySessionCodeMethod)
            throw std::logic_error("method libfptr_soft_lock_query_session_code() not found");
    
        return m_softLockQuerySessionCodeMethod(m_fptr);
    }

    
    virtual int softLockValidate()
    {
        if (!m_softLockValidateMethod)
            throw std::logic_error("method libfptr_soft_lock_validate() not found");
    
        return m_softLockValidateMethod(m_fptr);
    }

    
    virtual int utilCalcTax()
    {
        if (!m_utilCalcTaxMethod)
            throw std::logic_error("method libfptr_util_calc_tax() not found");
    
        return m_utilCalcTaxMethod(m_fptr);
    }

    
    virtual int downloadPicture()
    {
        if (!m_downloadPictureMethod)
            throw std::logic_error("method libfptr_download_picture() not found");
    
        return m_downloadPictureMethod(m_fptr);
    }

    
    virtual int bluetoothRemovePairedDevices()
    {
        if (!m_bluetoothRemovePairedDevicesMethod)
            throw std::logic_error("method libfptr_bluetooth_remove_paired_devices() not found");
    
        return m_bluetoothRemovePairedDevicesMethod(m_fptr);
    }

    
    virtual int utilTagInfo()
    {
        if (!m_utilTagInfoMethod)
            throw std::logic_error("method libfptr_util_tag_info() not found");
    
        return m_utilTagInfoMethod(m_fptr);
    }

    
    virtual int utilContainerVersions()
    {
        if (!m_utilContainerVersionsMethod)
            throw std::logic_error("method libfptr_util_container_versions() not found");
    
        return m_utilContainerVersionsMethod(m_fptr);
    }

    
    virtual int activateLicenses()
    {
        if (!m_activateLicensesMethod)
            throw std::logic_error("method libfptr_activate_licenses() not found");
    
        return m_activateLicensesMethod(m_fptr);
    }

    
    virtual int removeLicenses()
    {
        if (!m_removeLicensesMethod)
            throw std::logic_error("method libfptr_remove_licenses() not found");
    
        return m_removeLicensesMethod(m_fptr);
    }

    
    virtual int enterKeys()
    {
        if (!m_enterKeysMethod)
            throw std::logic_error("method libfptr_enter_keys() not found");
    
        return m_enterKeysMethod(m_fptr);
    }

    
    virtual int validateKeys()
    {
        if (!m_validateKeysMethod)
            throw std::logic_error("method libfptr_validate_keys() not found");
    
        return m_validateKeysMethod(m_fptr);
    }

    
    virtual int enterSerialNumber()
    {
        if (!m_enterSerialNumberMethod)
            throw std::logic_error("method libfptr_enter_serial_number() not found");
    
        return m_enterSerialNumberMethod(m_fptr);
    }

    
    virtual int getSerialNumberRequest()
    {
        if (!m_getSerialNumberRequestMethod)
            throw std::logic_error("method libfptr_get_serial_number_request() not found");
    
        return m_getSerialNumberRequestMethod(m_fptr);
    }

    
    virtual int uploadPixelBuffer()
    {
        if (!m_uploadPixelBufferMethod)
            throw std::logic_error("method libfptr_upload_pixel_buffer() not found");
    
        return m_uploadPixelBufferMethod(m_fptr);
    }

    
    virtual int downloadPixelBuffer()
    {
        if (!m_downloadPixelBufferMethod)
            throw std::logic_error("method libfptr_download_pixel_buffer() not found");
    
        return m_downloadPixelBufferMethod(m_fptr);
    }

    
    virtual int printPixelBuffer()
    {
        if (!m_printPixelBufferMethod)
            throw std::logic_error("method libfptr_print_pixel_buffer() not found");
    
        return m_printPixelBufferMethod(m_fptr);
    }

    
    virtual int utilConvertTagValue()
    {
        if (!m_utilConvertTagValueMethod)
            throw std::logic_error("method libfptr_util_convert_tag_value() not found");
    
        return m_utilConvertTagValueMethod(m_fptr);
    }

    
    virtual int parseMarkingCode()
    {
        if (!m_parseMarkingCodeMethod)
            throw std::logic_error("method libfptr_parse_marking_code() not found");
    
        return m_parseMarkingCodeMethod(m_fptr);
    }

    
    virtual int callScript()
    {
        if (!m_callScriptMethod)
            throw std::logic_error("method libfptr_call_script() not found");
    
        return m_callScriptMethod(m_fptr);
    }

    
    virtual int setHeaderLines()
    {
        if (!m_setHeaderLinesMethod)
            throw std::logic_error("method libfptr_set_header_lines() not found");
    
        return m_setHeaderLinesMethod(m_fptr);
    }

    
    virtual int setFooterLines()
    {
        if (!m_setFooterLinesMethod)
            throw std::logic_error("method libfptr_set_footer_lines() not found");
    
        return m_setFooterLinesMethod(m_fptr);
    }

    
    virtual int uploadPictureCliche()
    {
        if (!m_uploadPictureClicheMethod)
            throw std::logic_error("method libfptr_upload_picture_cliche() not found");
    
        return m_uploadPictureClicheMethod(m_fptr);
    }

    
    virtual int uploadPictureMemory()
    {
        if (!m_uploadPictureMemoryMethod)
            throw std::logic_error("method libfptr_upload_picture_memory() not found");
    
        return m_uploadPictureMemoryMethod(m_fptr);
    }

    
    virtual int uploadPixelBufferCliche()
    {
        if (!m_uploadPixelBufferClicheMethod)
            throw std::logic_error("method libfptr_upload_pixel_buffer_cliche() not found");
    
        return m_uploadPixelBufferClicheMethod(m_fptr);
    }

    
    virtual int uploadPixelBufferMemory()
    {
        if (!m_uploadPixelBufferMemoryMethod)
            throw std::logic_error("method libfptr_upload_pixel_buffer_memory() not found");
    
        return m_uploadPixelBufferMemoryMethod(m_fptr);
    }

    
    virtual int execDriverScript()
    {
        if (!m_execDriverScriptMethod)
            throw std::logic_error("method libfptr_exec_driver_script() not found");
    
        return m_execDriverScriptMethod(m_fptr);
    }

    
    virtual int uploadDriverScript()
    {
        if (!m_uploadDriverScriptMethod)
            throw std::logic_error("method libfptr_upload_driver_script() not found");
    
        return m_uploadDriverScriptMethod(m_fptr);
    }

    
    virtual int execDriverScriptById()
    {
        if (!m_execDriverScriptByIdMethod)
            throw std::logic_error("method libfptr_exec_driver_script_by_id() not found");
    
        return m_execDriverScriptByIdMethod(m_fptr);
    }

    
    virtual int writeUniversalCountersSettings()
    {
        if (!m_writeUniversalCountersSettingsMethod)
            throw std::logic_error("method libfptr_write_universal_counters_settings() not found");
    
        return m_writeUniversalCountersSettingsMethod(m_fptr);
    }

    
    virtual int readUniversalCountersSettings()
    {
        if (!m_readUniversalCountersSettingsMethod)
            throw std::logic_error("method libfptr_read_universal_counters_settings() not found");
    
        return m_readUniversalCountersSettingsMethod(m_fptr);
    }

    
    virtual int queryUniversalCountersState()
    {
        if (!m_queryUniversalCountersStateMethod)
            throw std::logic_error("method libfptr_query_universal_counters_state() not found");
    
        return m_queryUniversalCountersStateMethod(m_fptr);
    }

    
    virtual int resetUniversalCounters()
    {
        if (!m_resetUniversalCountersMethod)
            throw std::logic_error("method libfptr_reset_universal_counters() not found");
    
        return m_resetUniversalCountersMethod(m_fptr);
    }

    
    virtual int cacheUniversalCounters()
    {
        if (!m_cacheUniversalCountersMethod)
            throw std::logic_error("method libfptr_cache_universal_counters() not found");
    
        return m_cacheUniversalCountersMethod(m_fptr);
    }

    
    virtual int readUniversalCounterSum()
    {
        if (!m_readUniversalCounterSumMethod)
            throw std::logic_error("method libfptr_read_universal_counter_sum() not found");
    
        return m_readUniversalCounterSumMethod(m_fptr);
    }

    
    virtual int readUniversalCounterQuantity()
    {
        if (!m_readUniversalCounterQuantityMethod)
            throw std::logic_error("method libfptr_read_universal_counter_quantity() not found");
    
        return m_readUniversalCounterQuantityMethod(m_fptr);
    }

    
    virtual int clearUniversalCountersCache()
    {
        if (!m_clearUniversalCountersCacheMethod)
            throw std::logic_error("method libfptr_clear_universal_counters_cache() not found");
    
        return m_clearUniversalCountersCacheMethod(m_fptr);
    }

    
    virtual int disableOfdChannel()
    {
        if (!m_disableOfdChannelMethod)
            throw std::logic_error("method libfptr_disable_ofd_channel() not found");
    
        return m_disableOfdChannelMethod(m_fptr);
    }

    
    virtual int enableOfdChannel()
    {
        if (!m_enableOfdChannelMethod)
            throw std::logic_error("method libfptr_enable_ofd_channel() not found");
    
        return m_enableOfdChannelMethod(m_fptr);
    }

    
    virtual int validateJson()
    {
        if (!m_validateJsonMethod)
            throw std::logic_error("method libfptr_validate_json() not found");
    
        return m_validateJsonMethod(m_fptr);
    }

    
    virtual int reflectionCall()
    {
        if (!m_reflectionCallMethod)
            throw std::logic_error("method libfptr_reflection_call() not found");
    
        return m_reflectionCallMethod(m_fptr);
    }

    
    virtual int getRemoteServerInfo()
    {
        if (!m_getRemoteServerInfoMethod)
            throw std::logic_error("method libfptr_get_remote_server_info() not found");
    
        return m_getRemoteServerInfoMethod(m_fptr);
    }

    
    virtual int beginMarkingCodeValidation()
    {
        if (!m_beginMarkingCodeValidationMethod)
            throw std::logic_error("method libfptr_begin_marking_code_validation() not found");
    
        return m_beginMarkingCodeValidationMethod(m_fptr);
    }

    
    virtual int cancelMarkingCodeValidation()
    {
        if (!m_cancelMarkingCodeValidationMethod)
            throw std::logic_error("method libfptr_cancel_marking_code_validation() not found");
    
        return m_cancelMarkingCodeValidationMethod(m_fptr);
    }

    
    virtual int getMarkingCodeValidationStatus()
    {
        if (!m_getMarkingCodeValidationStatusMethod)
            throw std::logic_error("method libfptr_get_marking_code_validation_status() not found");
    
        return m_getMarkingCodeValidationStatusMethod(m_fptr);
    }

    
    virtual int acceptMarkingCode()
    {
        if (!m_acceptMarkingCodeMethod)
            throw std::logic_error("method libfptr_accept_marking_code() not found");
    
        return m_acceptMarkingCodeMethod(m_fptr);
    }

    
    virtual int declineMarkingCode()
    {
        if (!m_declineMarkingCodeMethod)
            throw std::logic_error("method libfptr_decline_marking_code() not found");
    
        return m_declineMarkingCodeMethod(m_fptr);
    }

    
    virtual int updateFnmKeys()
    {
        if (!m_updateFnmKeysMethod)
            throw std::logic_error("method libfptr_update_fnm_keys() not found");
    
        return m_updateFnmKeysMethod(m_fptr);
    }

    
    virtual int writeSalesNotice()
    {
        if (!m_writeSalesNoticeMethod)
            throw std::logic_error("method libfptr_write_sales_notice() not found");
    
        return m_writeSalesNoticeMethod(m_fptr);
    }

    
    virtual int checkMarkingCodeValidationsReady()
    {
        if (!m_checkMarkingCodeValidationsReadyMethod)
            throw std::logic_error("method libfptr_check_marking_code_validations_ready() not found");
    
        return m_checkMarkingCodeValidationsReadyMethod(m_fptr);
    }

    
    virtual int clearMarkingCodeValidationResult()
    {
        if (!m_clearMarkingCodeValidationResultMethod)
            throw std::logic_error("method libfptr_clear_marking_code_validation_result() not found");
    
        return m_clearMarkingCodeValidationResultMethod(m_fptr);
    }

    
    virtual int pingMarkingServer()
    {
        if (!m_pingMarkingServerMethod)
            throw std::logic_error("method libfptr_ping_marking_server() not found");
    
        return m_pingMarkingServerMethod(m_fptr);
    }

    
    virtual int getMarkingServerStatus()
    {
        if (!m_getMarkingServerStatusMethod)
            throw std::logic_error("method libfptr_get_marking_server_status() not found");
    
        return m_getMarkingServerStatusMethod(m_fptr);
    }

    
    virtual int isDriverLocked()
    {
        if (!m_isDriverLockedMethod)
            throw std::logic_error("method libfptr_is_driver_locked() not found");
    
        return m_isDriverLockedMethod(m_fptr);
    }

    
    virtual int getLastDocumentJournal()
    {
        if (!m_getLastDocumentJournalMethod)
            throw std::logic_error("method libfptr_get_last_document_journal() not found");
    
        return m_getLastDocumentJournalMethod(m_fptr);
    }

    
    virtual int findDocumentInJournal()
    {
        if (!m_findDocumentInJournalMethod)
            throw std::logic_error("method libfptr_find_document_in_journal() not found");
    
        return m_findDocumentInJournalMethod(m_fptr);
    }

    
    virtual int runFnCommand()
    {
        if (!m_runFnCommandMethod)
            throw std::logic_error("method libfptr_run_fn_command() not found");
    
        return m_runFnCommandMethod(m_fptr);
    }


private:
    LIBRARY_HANDLE m_library;
    void *m_fptr;

    GET_VERSION_STRING_METHOD m_getVersionMethod;
    CREATE_METHOD m_createMethod;
    CREATE_WITH_ID_METHOD m_createWithIDMethod;
    DESTROY_METHOD m_destroyMethod;

    SET_SETTINGS_METHOD m_setSettingsMethod;
    GET_SETTINGS_METHOD m_getSettingsMethod;
    SET_SINGLE_SETTING_METHOD m_setSingleSettingMethod;
    GET_SINGLE_SETTING_METHOD m_getSingleSettingMethod;

    IS_OPENED_METHOD m_isOpenedMethod;
    ERROR_CODE_METHOD m_errorCodeMethod;
    ERROR_DESCRIPTION_METHOD m_errorDescriptionMethod;
    ERROR_RECOMMENDATION_METHOD m_errorRecommendationMethod;
    RESET_ERROR_METHOD m_resetErrorMethod;

    SET_PARAM_BOOL_METHOD m_setParamBoolMethod;
    SET_PARAM_INT_METHOD m_setParamIntMethod;
    SET_PARAM_DOUBLE_METHOD m_setParamDoubleMethod;
    SET_PARAM_STRING_METHOD m_setParamStringMethod;
    SET_PARAM_BYTEARRAY_METHOD m_setParamByteArrayMethod;
    SET_PARAM_DATETIME_METHOD m_setParamDateTimeMethod;

    SET_PARAM_BOOL_METHOD m_setNonPrintableParamBoolMethod;
    SET_PARAM_INT_METHOD m_setNonPrintableParamIntMethod;
    SET_PARAM_DOUBLE_METHOD m_setNonPrintableParamDoubleMethod;
    SET_PARAM_STRING_METHOD m_setNonPrintableParamStringMethod;
    SET_PARAM_BYTEARRAY_METHOD m_setNonPrintableParamByteArrayMethod;
    SET_PARAM_DATETIME_METHOD m_setNonPrintableParamDateTimeMethod;

    IS_PARAM_AVAILABLE_METHOD m_isParamAvailableMethod;

    SET_PARAM_BOOL_METHOD m_setUserParamBoolMethod;
    SET_PARAM_INT_METHOD m_setUserParamIntMethod;
    SET_PARAM_DOUBLE_METHOD m_setUserParamDoubleMethod;
    SET_PARAM_STRING_METHOD m_setUserParamStringMethod;
    SET_PARAM_BYTEARRAY_METHOD m_setUserParamByteArrayMethod;
    SET_PARAM_DATETIME_METHOD m_setUserParamDateTimeMethod;

    GET_PARAM_BOOL_METHOD m_getParamBoolMethod;
    GET_PARAM_INT_METHOD m_getParamIntMethod;
    GET_PARAM_DOUBLE_METHOD m_getParamDoubleMethod;
    GET_PARAM_STRING_METHOD m_getParamStringMethod;
    GET_PARAM_BYTEARRAY_METHOD m_getParamByteArrayMethod;
    GET_PARAM_DATETIME_METHOD m_getParamDateTimeMethod;

    WRITE_LOG_METHOD m_writeLogMethod;
    CHANGE_LABEL_METHOD m_changeLabelMethod;
    SHOW_PROPERTIES_METHOD m_showPropertiesMethod;

    
    COMMON_METHOD m_applySingleSettingsMethod;

    COMMON_METHOD m_openMethod;

    COMMON_METHOD m_closeMethod;

    COMMON_METHOD m_resetParamsMethod;

    COMMON_METHOD m_runCommandMethod;

    COMMON_METHOD m_beepMethod;

    COMMON_METHOD m_openDrawerMethod;

    COMMON_METHOD m_cutMethod;

    COMMON_METHOD m_devicePoweroffMethod;

    COMMON_METHOD m_deviceRebootMethod;

    COMMON_METHOD m_openShiftMethod;

    COMMON_METHOD m_resetSummaryMethod;

    COMMON_METHOD m_initDeviceMethod;

    COMMON_METHOD m_queryDataMethod;

    COMMON_METHOD m_cashIncomeMethod;

    COMMON_METHOD m_cashOutcomeMethod;

    COMMON_METHOD m_openReceiptMethod;

    COMMON_METHOD m_cancelReceiptMethod;

    COMMON_METHOD m_closeReceiptMethod;

    COMMON_METHOD m_checkDocumentClosedMethod;

    COMMON_METHOD m_receiptTotalMethod;

    COMMON_METHOD m_receiptTaxMethod;

    COMMON_METHOD m_registrationMethod;

    COMMON_METHOD m_paymentMethod;

    COMMON_METHOD m_reportMethod;

    COMMON_METHOD m_printTextMethod;

    COMMON_METHOD m_printClicheMethod;

    COMMON_METHOD m_beginNonfiscalDocumentMethod;

    COMMON_METHOD m_endNonfiscalDocumentMethod;

    COMMON_METHOD m_printBarcodeMethod;

    COMMON_METHOD m_printPictureMethod;

    COMMON_METHOD m_printPictureByNumberMethod;

    COMMON_METHOD m_uploadPictureFromFileMethod;

    COMMON_METHOD m_clearPicturesMethod;

    COMMON_METHOD m_writeDeviceSettingRawMethod;

    COMMON_METHOD m_readDeviceSettingRawMethod;

    COMMON_METHOD m_commitSettingsMethod;

    COMMON_METHOD m_initSettingsMethod;

    COMMON_METHOD m_resetSettingsMethod;

    COMMON_METHOD m_writeDateTimeMethod;

    COMMON_METHOD m_writeLicenseMethod;

    COMMON_METHOD m_fnOperationMethod;

    COMMON_METHOD m_fnQueryDataMethod;

    COMMON_METHOD m_fnWriteAttributesMethod;

    COMMON_METHOD m_externalDevicePowerOnMethod;

    COMMON_METHOD m_externalDevicePowerOffMethod;

    COMMON_METHOD m_externalDeviceWriteDataMethod;

    COMMON_METHOD m_externalDeviceReadDataMethod;

    COMMON_METHOD m_operatorLoginMethod;

    COMMON_METHOD m_processJsonMethod;

    COMMON_METHOD m_readDeviceSettingMethod;

    COMMON_METHOD m_writeDeviceSettingMethod;

    COMMON_METHOD m_beginReadRecordsMethod;

    COMMON_METHOD m_readNextRecordMethod;

    COMMON_METHOD m_endReadRecordsMethod;

    COMMON_METHOD m_userMemoryOperationMethod;

    COMMON_METHOD m_continuePrintMethod;

    COMMON_METHOD m_initMgmMethod;

    COMMON_METHOD m_utilFormTlvMethod;

    COMMON_METHOD m_utilFormNomenclatureMethod;

    COMMON_METHOD m_utilMappingMethod;

    COMMON_METHOD m_readModelFlagsMethod;

    COMMON_METHOD m_lineFeedMethod;

    COMMON_METHOD m_flashFirmwareMethod;

    COMMON_METHOD m_softLockInitMethod;

    COMMON_METHOD m_softLockQuerySessionCodeMethod;

    COMMON_METHOD m_softLockValidateMethod;

    COMMON_METHOD m_utilCalcTaxMethod;

    COMMON_METHOD m_downloadPictureMethod;

    COMMON_METHOD m_bluetoothRemovePairedDevicesMethod;

    COMMON_METHOD m_utilTagInfoMethod;

    COMMON_METHOD m_utilContainerVersionsMethod;

    COMMON_METHOD m_activateLicensesMethod;

    COMMON_METHOD m_removeLicensesMethod;

    COMMON_METHOD m_enterKeysMethod;

    COMMON_METHOD m_validateKeysMethod;

    COMMON_METHOD m_enterSerialNumberMethod;

    COMMON_METHOD m_getSerialNumberRequestMethod;

    COMMON_METHOD m_uploadPixelBufferMethod;

    COMMON_METHOD m_downloadPixelBufferMethod;

    COMMON_METHOD m_printPixelBufferMethod;

    COMMON_METHOD m_utilConvertTagValueMethod;

    COMMON_METHOD m_parseMarkingCodeMethod;

    COMMON_METHOD m_callScriptMethod;

    COMMON_METHOD m_setHeaderLinesMethod;

    COMMON_METHOD m_setFooterLinesMethod;

    COMMON_METHOD m_uploadPictureClicheMethod;

    COMMON_METHOD m_uploadPictureMemoryMethod;

    COMMON_METHOD m_uploadPixelBufferClicheMethod;

    COMMON_METHOD m_uploadPixelBufferMemoryMethod;

    COMMON_METHOD m_execDriverScriptMethod;

    COMMON_METHOD m_uploadDriverScriptMethod;

    COMMON_METHOD m_execDriverScriptByIdMethod;

    COMMON_METHOD m_writeUniversalCountersSettingsMethod;

    COMMON_METHOD m_readUniversalCountersSettingsMethod;

    COMMON_METHOD m_queryUniversalCountersStateMethod;

    COMMON_METHOD m_resetUniversalCountersMethod;

    COMMON_METHOD m_cacheUniversalCountersMethod;

    COMMON_METHOD m_readUniversalCounterSumMethod;

    COMMON_METHOD m_readUniversalCounterQuantityMethod;

    COMMON_METHOD m_clearUniversalCountersCacheMethod;

    COMMON_METHOD m_disableOfdChannelMethod;

    COMMON_METHOD m_enableOfdChannelMethod;

    COMMON_METHOD m_validateJsonMethod;

    COMMON_METHOD m_reflectionCallMethod;

    COMMON_METHOD m_getRemoteServerInfoMethod;

    COMMON_METHOD m_beginMarkingCodeValidationMethod;

    COMMON_METHOD m_cancelMarkingCodeValidationMethod;

    COMMON_METHOD m_getMarkingCodeValidationStatusMethod;

    COMMON_METHOD m_acceptMarkingCodeMethod;

    COMMON_METHOD m_declineMarkingCodeMethod;

    COMMON_METHOD m_updateFnmKeysMethod;

    COMMON_METHOD m_writeSalesNoticeMethod;

    COMMON_METHOD m_checkMarkingCodeValidationsReadyMethod;

    COMMON_METHOD m_clearMarkingCodeValidationResultMethod;

    COMMON_METHOD m_pingMarkingServerMethod;

    COMMON_METHOD m_getMarkingServerStatusMethod;

    COMMON_METHOD m_isDriverLockedMethod;

    COMMON_METHOD m_getLastDocumentJournalMethod;

    COMMON_METHOD m_findDocumentInJournalMethod;

    COMMON_METHOD m_runFnCommandMethod;


    void loadMethods()
    {
#define FIND_FUNC(type, var, name, throwError) \
        var = (type) GET_PROC(m_library, name); \
        if (!var && throwError) \
            throw std::runtime_error("method " name "() not found")

        FIND_FUNC(GET_VERSION_STRING_METHOD, m_getVersionMethod, "libfptr_get_version_string", 1);

        FIND_FUNC(CREATE_METHOD, m_createMethod, "libfptr_create", 1);
        FIND_FUNC(CREATE_WITH_ID_METHOD, m_createWithIDMethod, "libfptr_create_with_id", 1);
        FIND_FUNC(DESTROY_METHOD, m_destroyMethod, "libfptr_destroy", 1);

        FIND_FUNC(SET_SETTINGS_METHOD, m_setSettingsMethod, "libfptr_set_settings", 1);
        FIND_FUNC(GET_SETTINGS_METHOD, m_getSettingsMethod, "libfptr_get_settings", 1);
        FIND_FUNC(SET_SINGLE_SETTING_METHOD, m_setSingleSettingMethod, "libfptr_set_single_setting", 1);
        FIND_FUNC(GET_SINGLE_SETTING_METHOD, m_getSingleSettingMethod, "libfptr_get_single_setting", 1);

        FIND_FUNC(IS_OPENED_METHOD, m_isOpenedMethod, "libfptr_is_opened", 1);

        FIND_FUNC(ERROR_CODE_METHOD, m_errorCodeMethod, "libfptr_error_code", 1);
        FIND_FUNC(ERROR_DESCRIPTION_METHOD, m_errorDescriptionMethod, "libfptr_error_description", 1);
        FIND_FUNC(ERROR_RECOMMENDATION_METHOD, m_errorRecommendationMethod, "libfptr_error_recommendation", 1);
        FIND_FUNC(RESET_ERROR_METHOD, m_resetErrorMethod, "libfptr_reset_error", 1);

        FIND_FUNC(SET_PARAM_BOOL_METHOD, m_setParamBoolMethod, "libfptr_set_param_bool", 1);
        FIND_FUNC(SET_PARAM_INT_METHOD, m_setParamIntMethod, "libfptr_set_param_int", 1);
        FIND_FUNC(SET_PARAM_DOUBLE_METHOD, m_setParamDoubleMethod, "libfptr_set_param_double", 1);
        FIND_FUNC(SET_PARAM_STRING_METHOD, m_setParamStringMethod, "libfptr_set_param_str", 1);
        FIND_FUNC(SET_PARAM_BYTEARRAY_METHOD, m_setParamByteArrayMethod, "libfptr_set_param_bytearray", 1);
        FIND_FUNC(SET_PARAM_DATETIME_METHOD, m_setParamDateTimeMethod, "libfptr_set_param_datetime", 1);

        FIND_FUNC(SET_PARAM_BOOL_METHOD, m_setNonPrintableParamBoolMethod, "libfptr_set_non_printable_param_bool", 1);
        FIND_FUNC(SET_PARAM_INT_METHOD, m_setNonPrintableParamIntMethod, "libfptr_set_non_printable_param_int", 1);
        FIND_FUNC(SET_PARAM_DOUBLE_METHOD, m_setNonPrintableParamDoubleMethod, "libfptr_set_non_printable_param_double", 1);
        FIND_FUNC(SET_PARAM_STRING_METHOD, m_setNonPrintableParamStringMethod, "libfptr_set_non_printable_param_str", 1);
        FIND_FUNC(SET_PARAM_BYTEARRAY_METHOD, m_setNonPrintableParamByteArrayMethod, "libfptr_set_non_printable_param_bytearray", 1);
        FIND_FUNC(SET_PARAM_DATETIME_METHOD, m_setNonPrintableParamDateTimeMethod, "libfptr_set_non_printable_param_datetime", 1);

        FIND_FUNC(SET_PARAM_BOOL_METHOD, m_setUserParamBoolMethod, "libfptr_set_user_param_bool", 1);
        FIND_FUNC(SET_PARAM_INT_METHOD, m_setUserParamIntMethod, "libfptr_set_user_param_int", 1);
        FIND_FUNC(SET_PARAM_DOUBLE_METHOD, m_setUserParamDoubleMethod, "libfptr_set_user_param_double", 1);
        FIND_FUNC(SET_PARAM_STRING_METHOD, m_setUserParamStringMethod, "libfptr_set_user_param_str", 1);
        FIND_FUNC(SET_PARAM_BYTEARRAY_METHOD, m_setUserParamByteArrayMethod, "libfptr_set_user_param_bytearray", 1);
        FIND_FUNC(SET_PARAM_DATETIME_METHOD, m_setUserParamDateTimeMethod, "libfptr_set_user_param_datetime", 1);

        FIND_FUNC(GET_PARAM_BOOL_METHOD, m_getParamBoolMethod, "libfptr_get_param_bool", 1);
        FIND_FUNC(GET_PARAM_INT_METHOD, m_getParamIntMethod, "libfptr_get_param_int", 1);
        FIND_FUNC(GET_PARAM_DOUBLE_METHOD, m_getParamDoubleMethod, "libfptr_get_param_double", 1);
        FIND_FUNC(GET_PARAM_STRING_METHOD, m_getParamStringMethod, "libfptr_get_param_str", 1);
        FIND_FUNC(GET_PARAM_BYTEARRAY_METHOD, m_getParamByteArrayMethod, "libfptr_get_param_bytearray", 1);
        FIND_FUNC(GET_PARAM_DATETIME_METHOD, m_getParamDateTimeMethod, "libfptr_get_param_datetime", 1);

        FIND_FUNC(IS_PARAM_AVAILABLE_METHOD, m_isParamAvailableMethod, "libfptr_is_param_available", 1);

        FIND_FUNC(WRITE_LOG_METHOD, m_writeLogMethod, "libfptr_log_write_ex", 1);
        FIND_FUNC(CHANGE_LABEL_METHOD, m_changeLabelMethod, "libfptr_change_label", 1);

        FIND_FUNC(SHOW_PROPERTIES_METHOD, m_showPropertiesMethod, "libfptr_show_properties", 1);

        
        FIND_FUNC(COMMON_METHOD, m_applySingleSettingsMethod, "libfptr_apply_single_settings", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_openMethod, "libfptr_open", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_closeMethod, "libfptr_close", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_resetParamsMethod, "libfptr_reset_params", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_runCommandMethod, "libfptr_run_command", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_beepMethod, "libfptr_beep", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_openDrawerMethod, "libfptr_open_drawer", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_cutMethod, "libfptr_cut", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_devicePoweroffMethod, "libfptr_device_poweroff", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_deviceRebootMethod, "libfptr_device_reboot", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_openShiftMethod, "libfptr_open_shift", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_resetSummaryMethod, "libfptr_reset_summary", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_initDeviceMethod, "libfptr_init_device", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_queryDataMethod, "libfptr_query_data", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_cashIncomeMethod, "libfptr_cash_income", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_cashOutcomeMethod, "libfptr_cash_outcome", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_openReceiptMethod, "libfptr_open_receipt", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_cancelReceiptMethod, "libfptr_cancel_receipt", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_closeReceiptMethod, "libfptr_close_receipt", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_checkDocumentClosedMethod, "libfptr_check_document_closed", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_receiptTotalMethod, "libfptr_receipt_total", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_receiptTaxMethod, "libfptr_receipt_tax", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_registrationMethod, "libfptr_registration", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_paymentMethod, "libfptr_payment", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_reportMethod, "libfptr_report", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_printTextMethod, "libfptr_print_text", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_printClicheMethod, "libfptr_print_cliche", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_beginNonfiscalDocumentMethod, "libfptr_begin_nonfiscal_document", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_endNonfiscalDocumentMethod, "libfptr_end_nonfiscal_document", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_printBarcodeMethod, "libfptr_print_barcode", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_printPictureMethod, "libfptr_print_picture", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_printPictureByNumberMethod, "libfptr_print_picture_by_number", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_uploadPictureFromFileMethod, "libfptr_upload_picture_from_file", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_clearPicturesMethod, "libfptr_clear_pictures", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_writeDeviceSettingRawMethod, "libfptr_write_device_setting_raw", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_readDeviceSettingRawMethod, "libfptr_read_device_setting_raw", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_commitSettingsMethod, "libfptr_commit_settings", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_initSettingsMethod, "libfptr_init_settings", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_resetSettingsMethod, "libfptr_reset_settings", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_writeDateTimeMethod, "libfptr_write_date_time", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_writeLicenseMethod, "libfptr_write_license", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_fnOperationMethod, "libfptr_fn_operation", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_fnQueryDataMethod, "libfptr_fn_query_data", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_fnWriteAttributesMethod, "libfptr_fn_write_attributes", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_externalDevicePowerOnMethod, "libfptr_external_device_power_on", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_externalDevicePowerOffMethod, "libfptr_external_device_power_off", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_externalDeviceWriteDataMethod, "libfptr_external_device_write_data", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_externalDeviceReadDataMethod, "libfptr_external_device_read_data", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_operatorLoginMethod, "libfptr_operator_login", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_processJsonMethod, "libfptr_process_json", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_readDeviceSettingMethod, "libfptr_read_device_setting", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_writeDeviceSettingMethod, "libfptr_write_device_setting", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_beginReadRecordsMethod, "libfptr_begin_read_records", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_readNextRecordMethod, "libfptr_read_next_record", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_endReadRecordsMethod, "libfptr_end_read_records", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_userMemoryOperationMethod, "libfptr_user_memory_operation", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_continuePrintMethod, "libfptr_continue_print", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_initMgmMethod, "libfptr_init_mgm", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_utilFormTlvMethod, "libfptr_util_form_tlv", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_utilFormNomenclatureMethod, "libfptr_util_form_nomenclature", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_utilMappingMethod, "libfptr_util_mapping", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_readModelFlagsMethod, "libfptr_read_model_flags", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_lineFeedMethod, "libfptr_line_feed", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_flashFirmwareMethod, "libfptr_flash_firmware", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_softLockInitMethod, "libfptr_soft_lock_init", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_softLockQuerySessionCodeMethod, "libfptr_soft_lock_query_session_code", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_softLockValidateMethod, "libfptr_soft_lock_validate", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_utilCalcTaxMethod, "libfptr_util_calc_tax", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_downloadPictureMethod, "libfptr_download_picture", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_bluetoothRemovePairedDevicesMethod, "libfptr_bluetooth_remove_paired_devices", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_utilTagInfoMethod, "libfptr_util_tag_info", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_utilContainerVersionsMethod, "libfptr_util_container_versions", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_activateLicensesMethod, "libfptr_activate_licenses", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_removeLicensesMethod, "libfptr_remove_licenses", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_enterKeysMethod, "libfptr_enter_keys", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_validateKeysMethod, "libfptr_validate_keys", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_enterSerialNumberMethod, "libfptr_enter_serial_number", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_getSerialNumberRequestMethod, "libfptr_get_serial_number_request", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_uploadPixelBufferMethod, "libfptr_upload_pixel_buffer", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_downloadPixelBufferMethod, "libfptr_download_pixel_buffer", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_printPixelBufferMethod, "libfptr_print_pixel_buffer", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_utilConvertTagValueMethod, "libfptr_util_convert_tag_value", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_parseMarkingCodeMethod, "libfptr_parse_marking_code", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_callScriptMethod, "libfptr_call_script", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_setHeaderLinesMethod, "libfptr_set_header_lines", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_setFooterLinesMethod, "libfptr_set_footer_lines", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_uploadPictureClicheMethod, "libfptr_upload_picture_cliche", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_uploadPictureMemoryMethod, "libfptr_upload_picture_memory", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_uploadPixelBufferClicheMethod, "libfptr_upload_pixel_buffer_cliche", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_uploadPixelBufferMemoryMethod, "libfptr_upload_pixel_buffer_memory", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_execDriverScriptMethod, "libfptr_exec_driver_script", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_uploadDriverScriptMethod, "libfptr_upload_driver_script", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_execDriverScriptByIdMethod, "libfptr_exec_driver_script_by_id", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_writeUniversalCountersSettingsMethod, "libfptr_write_universal_counters_settings", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_readUniversalCountersSettingsMethod, "libfptr_read_universal_counters_settings", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_queryUniversalCountersStateMethod, "libfptr_query_universal_counters_state", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_resetUniversalCountersMethod, "libfptr_reset_universal_counters", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_cacheUniversalCountersMethod, "libfptr_cache_universal_counters", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_readUniversalCounterSumMethod, "libfptr_read_universal_counter_sum", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_readUniversalCounterQuantityMethod, "libfptr_read_universal_counter_quantity", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_clearUniversalCountersCacheMethod, "libfptr_clear_universal_counters_cache", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_disableOfdChannelMethod, "libfptr_disable_ofd_channel", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_enableOfdChannelMethod, "libfptr_enable_ofd_channel", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_validateJsonMethod, "libfptr_validate_json", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_reflectionCallMethod, "libfptr_reflection_call", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_getRemoteServerInfoMethod, "libfptr_get_remote_server_info", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_beginMarkingCodeValidationMethod, "libfptr_begin_marking_code_validation", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_cancelMarkingCodeValidationMethod, "libfptr_cancel_marking_code_validation", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_getMarkingCodeValidationStatusMethod, "libfptr_get_marking_code_validation_status", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_acceptMarkingCodeMethod, "libfptr_accept_marking_code", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_declineMarkingCodeMethod, "libfptr_decline_marking_code", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_updateFnmKeysMethod, "libfptr_update_fnm_keys", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_writeSalesNoticeMethod, "libfptr_write_sales_notice", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_checkMarkingCodeValidationsReadyMethod, "libfptr_check_marking_code_validations_ready", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_clearMarkingCodeValidationResultMethod, "libfptr_clear_marking_code_validation_result", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_pingMarkingServerMethod, "libfptr_ping_marking_server", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_getMarkingServerStatusMethod, "libfptr_get_marking_server_status", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_isDriverLockedMethod, "libfptr_is_driver_locked", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_getLastDocumentJournalMethod, "libfptr_get_last_document_journal", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_findDocumentInJournalMethod, "libfptr_find_document_in_journal", DTOX_ERROR_ON_METHOD_LOAD);

        FIND_FUNC(COMMON_METHOD, m_runFnCommandMethod, "libfptr_run_fn_command", DTOX_ERROR_ON_METHOD_LOAD);

#undef FIND_FUNC
    }
};

FPTR_END_NAMESPACE

#undef GET_PROC
#undef LOAD_LIBRARY
#undef UNLOAD_LIBRARY
#undef JAVAPATH_DELIM
#undef LIBRARY_HANDLE

#endif //DRIVERSX_CPP_WRAPPER_H
